---
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-ingest-script
  labels:
    app.kubernetes.io/name: db-ingest
data:
  ingest-postgres.sh: |-
    #!/bin/sh

    set -o errexit
    set -o nounset

    apt update -y
    apt install -y curl wget

    CONTROL_DIR=/tmp
    STATE_FILE=${CONTROL_DIR}/mysql-state.cfg
    DESIRED_STATE=meertime_staging_db_init_2023-12-1.sql.gz
    DESIRED_STATE_UNPACKED=$(echo $DESIRED_STATE | sed 's/.gz//g')
    CHECKSUM=d0c0e541d5de2e86a4dbae32f49ad749

    trap "rm -f ${CONTROL_DIR}/${DESIRED_STATE} ${CONTROL_DIR}/${DESIRED_STATE_UNPACKED}" EXIT

    # Check if the database is empty
    is_empty=$(psql -h database.meertime-staging.svc.cluster.local -U $POSTGRES_USER -d $POSTGRES_DATABASE -wtAc "SELECT COUNT(*) FROM pg_tables WHERE schemaname != 'pg_catalog' AND schemaname != 'information_schema';")

    if [ "$is_empty" -eq "0" ]; then
      echo "Database is empty. Restoring from backup..."

      echo "Listing download"
      ls -l ${CONTROL_DIR}/${DESIRED_STATE}
      md5sum_check=$(md5sum ${CONTROL_DIR}/${DESIRED_STATE} | awk '{print $1}')
      if [ "${md5sum_check}" = "${CHECKSUM}" ]; then
        echo "Checksum matches, proceeding"
        # Run pg_restore
        gunzip  < ${CONTROL_DIR}/${DESIRED_STATE} | pg_restore -d $POSTGRES_DATABASE -U $POSTGRES_USER -w -h database.meertime-staging.svc.cluster.local
        echo ${DESIRED_STATE} > ${STATE_FILE}
      else
        echo "Checksum of desired state file does not match expectation, aborting"
        echo "Expected ${CHECKSUM} got ${md5sum_check}"
        ls ${CONTROL_DIR}/${DESIRED_STATE}
        exit 1
      fi
    else
      echo "Database is not empty. No restore needed."
    fi

    exit 0
