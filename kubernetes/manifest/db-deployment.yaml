apiVersion: v1
kind: Service
metadata:
  name: database
  labels:
    app: db
    tier: database
spec:
  ports:
    - port: 3306
      targetPort: 3306
  selector:
    app: db
    tier: database
  clusterIP: None
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-storage-data-pvc-staging
  labels:
    app: db
    tier: database
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 3Gi
  storageClassName: ""
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: database
  labels:
    app: db
    tier: database
spec:
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: db
      tier: database
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: db
        tier: database
    spec:
      containers:
        - image: postgres:14.9
          resources: {}
          name: postgres
          envFrom:
            - secretRef:
                name: db-config
          ports:
            - containerPort: 5432
              name: postgres
          volumeMounts:
            - name: db-storage-data-pv-staging
              mountPath: /var/lib/postgresql/data
          livenessProbe:
            exec:
              command:
                - bash
                - "-c"
                - |
                  set -ex
                  psql -w -U $POSTGRES_USER -d $POSTGRES_DATABASE -c "SELECT 1"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              # Check we can execute queries over TCP (skip-networking is off).
              command:
                - bash
                - "-c"
                - |
                  set -ex
                  psql -w -U $POSTGRES_USER -d $POSTGRES_DATABASE -c "SELECT 1"
            initialDelaySeconds: 5
            periodSeconds: 2
            timeoutSeconds: 1
      volumes:
        - name: db-storage-data-pv-staging
          persistentVolumeClaim:
            claimName: db-storage-data-pvc-staging
