---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-control-map
  labels:
    app.kubernetes.io/name: mysql-control
data:
  control-mysql.sh: |-
    #!/bin/sh

    set -o errexit
    set -o nounset

    apt update -y
    apt install -y curl wget

    CONTROL_DIR=/tmp
    STATE_FILE=${CONTROL_DIR}/mysql-state.cfg
    DESIRED_STATE=meertime_staging_db_init_2023-12-1.sql.gz
    DESIRED_STATE_UNPACKED=$(echo $DESIRED_STATE | sed 's/.gz//g')
    CHECKSUM=d0c0e541d5de2e86a4dbae32f49ad749

    trap "rm -f ${CONTROL_DIR}/${DESIRED_STATE} ${CONTROL_DIR}/${DESIRED_STATE_UNPACKED}" EXIT

    PERFORM_INIT=1

    echo "testing if state file exist"
    if [ -e ${STATE_FILE} ]; then
      echo "State file exists"
      echo "Verifying contents"
      contents=$(cat ${STATE_FILE})
      echo "Contents of the file are :$contents"
      if [ "${contents}"x != ${DESIRED_STATE}x ] || [ "FORCE_RELOAD_DEV"x = "$FORCE_RELOAD"x ]; then
        PERFORM_INIT=0
      else
        echo "mysql is in desired state"
      fi
    else
      PERFORM_INIT=0
    fi

    if [ "${PERFORM_INIT}" -eq "0" ]; then
      cd ${CONTROL_DIR}
      /bin/sh /vault/secrets/retrieve-control.sh ${DESIRED_STATE}
      echo "Listing download"
      ls -l ${CONTROL_DIR}/${DESIRED_STATE}
      md5sum_check=$(md5sum ${CONTROL_DIR}/${DESIRED_STATE} | awk '{print $1}')
      if [[ "${md5sum_check}" == "${CHECKSUM}" ]]; then
        echo "Checksum matches, proceeding"
        gunzip  < ${CONTROL_DIR}/${DESIRED_STATE} | pg_restore -d $POSTGRES_DATABASE -U $POSTGRES_USER -w
        echo ${DESIRED_STATE} > ${STATE_FILE}
      else
        echo "Checksum of desired state file does not match expectation, aborting"
        echo "Expected ${CHECKSUM} got ${md5sum_check}"
        ls ${CONTROL_DIR}/${DESIRED_STATE}
        exit 1
      fi
    fi

    exit 0
