---
# Source: meertime-dataportal/charts/redis/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: release-name-redis
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.0
    helm.sh/chart: redis-20.1.4
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: redis
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow inbound connections
    - ports:
        - port: 6379
---
# Source: meertime-dataportal/charts/redis/templates/master/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: release-name-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.0
    helm.sh/chart: redis-20.1.4
    app.kubernetes.io/component: master
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
---
# Source: meertime-dataportal/charts/redis/templates/replicas/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: release-name-redis-replicas
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.0
    helm.sh/chart: redis-20.1.4
    app.kubernetes.io/component: replica
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: replica
---
# Source: meertime-dataportal/charts/redis/templates/master/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: release-name-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.0
    helm.sh/chart: redis-20.1.4
---
# Source: meertime-dataportal/charts/redis/templates/replicas/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: release-name-redis-replica
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.0
    helm.sh/chart: redis-20.1.4
---
# Source: meertime-dataportal/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: meertime
  namespace: default
  labels:
    helm.sh/chart: meertime-dataportal-1.0.45
    app.kubernetes.io/name: meertime-dataportal
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.0.5"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: meertime-dataportal/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-redis
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.0
    helm.sh/chart: redis-20.1.4
type: Opaque
data:
  redis-password: "TkxzUThHZGsyVw=="
---
# Source: meertime-dataportal/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.0
    helm.sh/chart: redis-20.1.4
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: meertime-dataportal/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-health
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.0
    helm.sh/chart: redis-20.1.4
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: meertime-dataportal/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-redis-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.0
    helm.sh/chart: redis-20.1.4
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
  start-replica.sh: |
    #!/bin/bash

    get_port() {
        hostname="$1"
        type="$2"

        port_var=$(echo "${hostname^^}_SERVICE_PORT_$type" | sed "s/-/_/g")
        port=${!port_var}

        if [ -z "$port" ]; then
            case $type in
                "SENTINEL")
                    echo 26379
                    ;;
                "REDIS")
                    echo 6379
                    ;;
            esac
        else
            echo $port
        fi
    }

    get_full_hostname() {
        hostname="$1"
        full_hostname="${hostname}.${HEADLESS_SERVICE}"
        echo "${full_hostname}"
    }

    REDISPORT=$(get_port "$HOSTNAME" "REDIS")
    HEADLESS_SERVICE="release-name-redis-headless.default.svc.cluster.local"

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/replica.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi

    echo "" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-port $REDISPORT" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-ip $(get_full_hostname "$HOSTNAME")" >> /opt/bitnami/redis/etc/replica.conf
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--replicaof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: meertime-dataportal/templates/config-map-script.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-ingest-script
  namespace: default
  labels:
    app.kubernetes.io/name: db-ingest
data:
  ingest-postgres.sh: |-
    #!/bin/sh
    
    apt update -y
    apt install -y curl wget
    
    CONTROL_DIR=/tmp
    STATE_FILE=${CONTROL_DIR}/mysql-state.cfg
    DESIRED_STATE=meertime_staging_db_init_2023-12-22.sql.gz
    DESIRED_STATE_UNPACKED=$(echo $DESIRED_STATE | sed 's/.gz//g')
    CHECKSUM=de53b851f9e07f48887f88094b8e83a4
    
    trap "rm -f ${CONTROL_DIR}/${DESIRED_STATE} ${CONTROL_DIR}/${DESIRED_STATE_UNPACKED}" EXIT
    
    # Check if the database is empty
    is_empty=$(psql -h $DB_HOST -U $POSTGRES_USER -d $POSTGRES_DATABASE -wtAc "SELECT COUNT(*) FROM pg_tables WHERE schemaname != 'pg_catalog' AND schemaname != 'information_schema';")
    
    if [ "$is_empty" -eq "0" ]; then
      echo "Database is empty. Restoring from backup..."
      /bin/sh /vault/secrets/retrieve-control.sh ${DESIRED_STATE}
    
      echo "Listing download"
      ls -l ${CONTROL_DIR}/${DESIRED_STATE}
      md5sum_check=$(md5sum ${CONTROL_DIR}/${DESIRED_STATE} | awk '{print $1}')
      if [ "${md5sum_check}" = "${CHECKSUM}" ]; then
        echo "Checksum matches, proceeding"
        # Run pg_restore
        gunzip  < ${CONTROL_DIR}/${DESIRED_STATE} | pg_restore -d $POSTGRES_DATABASE -U $POSTGRES_USER -w -h $DB_HOST
        echo ${DESIRED_STATE} > ${STATE_FILE}
      else
        echo "Checksum of desired state file does not match expectation, aborting"
        echo "Expected ${CHECKSUM} got ${md5sum_check}"
        ls ${CONTROL_DIR}/${DESIRED_STATE}
        exit 1
      fi
    else
      echo "Database is not empty. No restore needed."
    fi
    
    exit 0
---
# Source: meertime-dataportal/templates/config-map-script.yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-bkp-script
  namespace: default
  labels:
    app.kubernetes.io/name: db-bkp-script
data:
  backup.sh: |-
    #!/bin/sh
    #
    # postgres backup script
    #
    
    apt update -y
    apt install -y curl wget
    
    BACKUP_DIR="/backup"
    TIMESTAMP="$(date +%Y%m%d%H%M%S)"
    echo "test postgres connection"
    if [ -z "$(psql -w -U $POSTGRES_USER -d $POSTGRES_DATABASE -h $DB_HOST -c 'SELECT 1')" ]; then
      echo "postgres connection failed! exiting..."
      exit 1
    fi
    echo "started" > ${BACKUP_DIR}/${TIMESTAMP}.state
    
    
    echo "delete old backups"
    find ${BACKUP_DIR} -maxdepth 2 -mtime +3 -regex "^${BACKUP_DIR}/.*[0-9]*_.*\.sql.tar.gz$" -type f -exec rm {} \;
    
    echo "Backing up db ${POSTGRES_DATABASE}"
    
    pg_dump -Fc --file=${TIMESTAMP}_${POSTGRES_DATABASE}.sql -U $POSTGRES_USER -d $POSTGRES_DATABASE -h $DB_HOST -O
    rc=$?
    
    if [ "$rc" != "0" ]; then
      echo "backup failed"
      exit 1
    fi
    
    echo "Archiving sqldumps"
    tar -cvf ${BACKUP_DIR}/${TIMESTAMP}.sql.tar.gz ${TIMESTAMP}*
    
    echo "complete" > ${BACKUP_DIR}/${TIMESTAMP}.state
    echo "Disk usage in ${BACKUP_DIR}"
    du -h -d 2 ${BACKUP_DIR}
    echo "Backup successful! :-)"
---
# Source: meertime-dataportal/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    helm.sh/chart: meertime-dataportal-1.0.45
    app.kubernetes.io/name: meertime-dataportal
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.0.5"
    app.kubernetes.io/managed-by: Helm
  name: meertime
  namespace: default
rules:
  - apiGroups: ["*"]
    #
    # at the HTTP level, the name of the resource for accessing Secret
    # objects is "secrets"
    resources: ["secrets"]
    verbs: ["*"]
---
# Source: meertime-dataportal/templates/role-binding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: meertime
  namespace: default
  labels:
    helm.sh/chart: meertime-dataportal-1.0.45
    app.kubernetes.io/name: meertime-dataportal
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.0.5"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: meertime
    namespace: default
roleRef:
  kind: Role
  name: meertime
  apiGroup: rbac.authorization.k8s.io
---
# Source: meertime-dataportal/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.0
    helm.sh/chart: redis-20.1.4
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: redis
---
# Source: meertime-dataportal/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.0
    helm.sh/chart: redis-20.1.4
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master
---
# Source: meertime-dataportal/charts/redis/templates/replicas/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-redis-replicas
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.0
    helm.sh/chart: redis-20.1.4
    app.kubernetes.io/component: replica
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: replica
---
# Source: meertime-dataportal/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: django-service
  namespace: default
  labels:
    name: django
spec:
  type: ClusterIP
  ports:
    - name: django
      port: 8000
      targetPort: 8000
      protocol: TCP
  selector:
    name: django
---
# Source: meertime-dataportal/templates/service.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: default
  labels:
    name: nginx
spec:
  type: ClusterIP
  ports:
    - name: nginx
      port: 80
      targetPort: 80
      protocol: TCP
  selector:
    name: nginx
---
# Source: meertime-dataportal/templates/service.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: react-service
  namespace: default
  labels:
    name: react
spec:
  type: ClusterIP
  ports:
    - name: react
      port: 3000
      targetPort: 3000
      protocol: TCP
  selector:
    name: react
---
# Source: meertime-dataportal/templates/service.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: database-service
  namespace: default
  labels:
    name: database
spec:
  type: ClusterIP
  ports:
    - name: postgres
      port: 5432
      targetPort: 5432
      protocol: TCP
  selector:
    name: database
---
# Source: meertime-dataportal/templates/service.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: default
  labels:
    name: redis
spec:
  type: ClusterIP
  ports:
    - name: redis
      port: 6379
      targetPort: 6379
      protocol: TCP
  selector:
    name: redis
---
# Source: meertime-dataportal/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: database
  namespace: default
  labels:
    name: database
spec:
  replicas: 1
  selector:
    matchLabels:
      name: database
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        serviceAccountName: meertime
        vault.hashicorp.com/agent-init-first: "true"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-secret-retrieve-control.sh: kv/meertime/nexus/service
        vault.hashicorp.com/agent-inject-template-retrieve-control.sh: |
          {{- with secret "kv/meertime/nexus/service" -}}
          #!/bin/sh
        
          set -o nounset
          apt update -y; apt install -y wget;
          wget --no-check-certificate --http-user='{{ .Data.NEXUS_USER }}' --http-password='{{ .Data.NEXUS_PASS }}' https://{{ .Data.NEXUS_URL }}/{{ .Data.NEXUS_CONTROL_DIR }}/$1 -P /tmp
          {{- end }}
        vault.hashicorp.com/agent-pre-populate-only: "true"
        vault.hashicorp.com/role: meertime
      labels:
        name: database
    spec:
      initContainers:
      containers:
        - name: postgres
          image: "postgres:14.9"
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: db-config
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 30
            exec:
              command:
              - bash
              - -c
              - |
                set -ex
                psql -w -U $POSTGRES_USER -d $POSTGRES_DATABASE -c "SELECT 1"
          readinessProbe:
            initialDelaySeconds: 30
            periodSeconds: 30
            exec:
              command:
              - bash
              - -c
              - |
                set -ex
                psql -w -U $POSTGRES_USER -d $POSTGRES_DATABASE -c "SELECT 1"
          resources:
            limits:
              cpu: 1000m
              memory: 4096Mi
            requests:
              cpu: 1000m
              memory: 4096Mi
          volumeMounts:
              - name: db-storage-data
                mountPath: /var/lib/postgresql/data
      volumes:
          - name: db-storage-data
            persistentVolumeClaim:
              claimName: db-storage-data
---
# Source: meertime-dataportal/templates/deployment.yaml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: react
  namespace: default
  labels:
    name: react
spec:
  replicas: 1
  selector:
    matchLabels:
      name: react
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        serviceAccountName: meertime
        vault.hashicorp.com/agent-init-first: "true"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-secret-retrieve-control.sh: kv/meertime/nexus/service
        vault.hashicorp.com/agent-inject-template-retrieve-control.sh: |
          {{- with secret "kv/meertime/nexus/service" -}}
          #!/bin/sh
        
          set -o nounset
          apt update -y; apt install -y wget;
          wget --no-check-certificate --http-user='{{ .Data.NEXUS_USER }}' --http-password='{{ .Data.NEXUS_PASS }}' https://{{ .Data.NEXUS_URL }}/{{ .Data.NEXUS_CONTROL_DIR }}/$1 -P /tmp
          {{- end }}
        vault.hashicorp.com/agent-pre-populate-only: "true"
        vault.hashicorp.com/role: meertime
      labels:
        name: react
    spec:
      imagePullSecrets:
        - name: regcred
      serviceAccountName: meertime
      initContainers:
      containers:
        - name: react
          image: "nexus.gwdc.org.au/meertime/react:3.0.5"
          imagePullPolicy: IfNotPresent
          ports:
            - name: react
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 30
            httpGet:
              path: /
              port: 3000
          readinessProbe:
            initialDelaySeconds: 30
            periodSeconds: 30
            httpGet:
              path: /
              port: 3000
          volumeMounts:
      volumes:
---
# Source: meertime-dataportal/templates/deployment.yaml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: django
  namespace: default
  labels:
    name: django
spec:
  replicas: 1
  selector:
    matchLabels:
      name: django
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        serviceAccountName: meertime
        vault.hashicorp.com/agent-init-first: "true"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-secret-retrieve-control.sh: kv/meertime/nexus/service
        vault.hashicorp.com/agent-inject-template-retrieve-control.sh: |
          {{- with secret "kv/meertime/nexus/service" -}}
          #!/bin/sh
        
          set -o nounset
          apt update -y; apt install -y wget;
          wget --no-check-certificate --http-user='{{ .Data.NEXUS_USER }}' --http-password='{{ .Data.NEXUS_PASS }}' https://{{ .Data.NEXUS_URL }}/{{ .Data.NEXUS_CONTROL_DIR }}/$1 -P /tmp
          {{- end }}
        vault.hashicorp.com/agent-pre-populate-only: "true"
        vault.hashicorp.com/role: meertime
      labels:
        name: django
    spec:
      imagePullSecrets:
        - name: regcred
      serviceAccountName: meertime
      initContainers:
        - name: postgres-ingest-script
          image: "postgres:14.9"
          imagePullPolicy: IfNotPresent
          env:
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: db-configmap
                  key: host
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-config
                  key: POSTGRES_PASSWORD
          envFrom:
            - secretRef:
                name: db-control
            - secretRef:
                name: db-config
          volumeMounts:
              - name: db-ingest-script
                mountPath: /mnt/db-ingest/
          command:
              - /bin/sh
              - /mnt/db-ingest/ingest-postgres.sh
        - name: migrate
          image: "nexus.gwdc.org.au/meertime/django:3.0.5"
          imagePullPolicy: IfNotPresent
          env:
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: db-configmap
                  key: host
          envFrom:
            - secretRef:
                name: django-multi
            - secretRef:
                name: db-config
          volumeMounts:
          command:
              - python
              - manage.py
              - migrate
      containers:
        - name: django
          image: "nexus.gwdc.org.au/meertime/django:3.0.5"
          imagePullPolicy: IfNotPresent
          env:
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: db-configmap
                  key: host
          envFrom:
            - secretRef:
                name: django-multi
            - secretRef:
                name: db-config
          ports:
            - name: django
              containerPort: 8000
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 30
            httpGet:
              path: /
              port: 8000
          readinessProbe:
            initialDelaySeconds: 30
            periodSeconds: 30
            httpGet:
              path: /
              port: 8000
          volumeMounts:
              - name: meertime-img-storage
                mountPath: /media
          command:
              - gunicorn
              - --bind=0.0.0.0:8000
              - --timeout=120
              - --workers=8
              - meertime.wsgi:application
      volumes:
          - name: db-storage-data
            persistentVolumeClaim:
              claimName: db-storage-data
          - name: db-ingest-script
            configMap:
              name: db-ingest-script
          - name: meertime-img-storage
            persistentVolumeClaim:
              claimName: meertime-storage-img
---
# Source: meertime-dataportal/templates/deployment.yaml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: default
  labels:
    name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      name: nginx
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        serviceAccountName: meertime
        vault.hashicorp.com/agent-init-first: "true"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-secret-retrieve-control.sh: kv/meertime/nexus/service
        vault.hashicorp.com/agent-inject-template-retrieve-control.sh: |
          {{- with secret "kv/meertime/nexus/service" -}}
          #!/bin/sh
        
          set -o nounset
          apt update -y; apt install -y wget;
          wget --no-check-certificate --http-user='{{ .Data.NEXUS_USER }}' --http-password='{{ .Data.NEXUS_PASS }}' https://{{ .Data.NEXUS_URL }}/{{ .Data.NEXUS_CONTROL_DIR }}/$1 -P /tmp
          {{- end }}
        vault.hashicorp.com/agent-pre-populate-only: "true"
        vault.hashicorp.com/role: meertime
      labels:
        name: nginx
    spec:
      imagePullSecrets:
        - name: regcred
      serviceAccountName: meertime
      initContainers:
        - name: collectstatic
          image: "nexus.gwdc.org.au/meertime/django:3.0.5"
          imagePullPolicy: IfNotPresent
          env:
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: db-configmap
                  key: host
          envFrom:
            - secretRef:
                name: django-multi
            - secretRef:
                name: db-config
          volumeMounts:
              - name: static-volume-django
                mountPath: /static
          command:
              - python
              - manage.py
              - collectstatic
              - --noinput
      containers:
        - name: ng-meertime
          image: "nexus.gwdc.org.au/meertime/nginx:1.5.1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: ng-meertime
              containerPort: 80
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 30
            httpGet:
              path: /
              port: 80
          readinessProbe:
            initialDelaySeconds: 30
            periodSeconds: 30
            httpGet:
              path: /
              port: 80
          volumeMounts:
              - name: static-volume-django
                mountPath: /static
              - name: meertime-img-storage
                mountPath: /media
      volumes:
          - name: static-volume-django
            emptyDir: {}
          - name: meertime-img-storage
            persistentVolumeClaim:
              claimName: meertime-storage-img
---
# Source: meertime-dataportal/templates/deployment.yaml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: default
  labels:
    name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      name: redis
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        serviceAccountName: meertime
        vault.hashicorp.com/agent-init-first: "true"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-secret-retrieve-control.sh: kv/meertime/nexus/service
        vault.hashicorp.com/agent-inject-template-retrieve-control.sh: |
          {{- with secret "kv/meertime/nexus/service" -}}
          #!/bin/sh
        
          set -o nounset
          apt update -y; apt install -y wget;
          wget --no-check-certificate --http-user='{{ .Data.NEXUS_USER }}' --http-password='{{ .Data.NEXUS_PASS }}' https://{{ .Data.NEXUS_URL }}/{{ .Data.NEXUS_CONTROL_DIR }}/$1 -P /tmp
          {{- end }}
        vault.hashicorp.com/agent-pre-populate-only: "true"
        vault.hashicorp.com/role: meertime
      labels:
        name: redis
    spec:
      initContainers:
      containers:
        - name: redis
          image: "docker.io/bitnami/redis:7.4.0-debian-12-r4"
          imagePullPolicy: IfNotPresent
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            tcpSocket:
              port: 6379
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            tcpSocket:
              port: 6379
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
              - name: empty-dir
                mountPath: /data
              - name: empty-dir
                mountPath: /opt/bitnami/redis/etc/
              - name: empty-dir
                mountPath: /tmp
      volumes:
          - name: empty-dir
            emptyDir: {}
---
# Source: meertime-dataportal/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.0
    helm.sh/chart: redis-20.1.4
    app.kubernetes.io/component: master
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
  serviceName: release-name-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.4.0
        helm.sh/chart: redis-20.1.4
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 3993a5a33ba3c60149cbc8f1b111bb8e895ade574ce1aee868a8b3eb6235f25b
        checksum/secret: d999b1b4fc66804c9e7579698ee196e3701fa533f8820c7209ec0e02f0048cd5
    spec:
      
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: release-name-redis-master
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.4.0-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: empty-dir
              mountPath: /opt/bitnami/redis/etc/
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: start-scripts
          configMap:
            name: release-name-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: release-name-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: release-name-redis-configuration
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: redis-data
        labels:
          app.kubernetes.io/instance: release-name
          app.kubernetes.io/name: redis
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: meertime-dataportal/charts/redis/templates/replicas/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-redis-replicas
  namespace: "default"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.4.0
    helm.sh/chart: redis-20.1.4
    app.kubernetes.io/component: replica
spec:
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: replica
  serviceName: release-name-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.4.0
        helm.sh/chart: redis-20.1.4
        app.kubernetes.io/component: replica
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 3993a5a33ba3c60149cbc8f1b111bb8e895ade574ce1aee868a8b3eb6235f25b
        checksum/secret: c0df41b7699cf2d819e96a541b03a54738742446d61cc08d06ec08ddc24cd63e
    spec:
      
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: release-name-redis-replica
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: replica
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.4.0-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-replica.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: replica
            - name: REDIS_MASTER_HOST
              value: release-name-redis-master-0.release-name-redis-headless.default.svc.cluster.local
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: REDIS_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          startupProbe:
            failureThreshold: 22
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: redis
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local_and_master.sh 1
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: empty-dir
              mountPath: /opt/bitnami/redis/etc
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: start-scripts
          configMap:
            name: release-name-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: release-name-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: release-name-redis-configuration
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: redis-data
        labels:
          app.kubernetes.io/instance: release-name
          app.kubernetes.io/name: redis
          app.kubernetes.io/component: replica
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: meertime-dataportal/templates/cron-job.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: db-bkp-cronjob
  namespace: default
  labels:
    helm.sh/chart: meertime-dataportal-1.0.45
    app.kubernetes.io/name: meertime-dataportal
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.0.5"
    app.kubernetes.io/managed-by: Helm
spec:
  schedule: "20 1 * * *"
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 7
  successfulJobsHistoryLimit: 7
  jobTemplate:
    metadata:
      labels:
        name: db-bkp-cronjob
        cronjob-name: db-bkp-cronjob
        helm.sh/chart: meertime-dataportal-1.0.45
        app.kubernetes.io/name: meertime-dataportal
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "3.0.5"
        app.kubernetes.io/managed-by: Helm
    spec:
      backoffLimit: 1
      template:
        spec:
          serviceAccountName: 
          containers:
            - command:
                - /bin/sh
                - /scripts/backup.sh
              name: postgres-backup-script
              image: postgres:14.9
              imagePullPolicy: IfNotPresent
              resources: {}
              env:
                - name: DB_HOST
                  valueFrom:
                    configMapKeyRef:
                      name: db-configmap
                      key: host
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: db-config
                      key: POSTGRES_PASSWORD
              envFrom:
                - secretRef:
                    name: db-control
                - secretRef:
                    name: db-config
              volumeMounts:
                  - name: backups
                    mountPath: /backup
                  - name: db-bkp-script
                    mountPath: /scripts
          imagePullSecrets:
            - name: regcred
          restartPolicy: Never
          volumes:
              - name: backups
                persistentVolumeClaim:
                  claimName: db-storage-bkp
              - name: db-bkp-script
                configMap:
                  name: db-bkp-script
        metadata:
---
# Source: meertime-dataportal/templates/cron-job.yaml
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secrets-integrator-meertime
  namespace: default
  labels:
    helm.sh/chart: meertime-dataportal-1.0.45
    app.kubernetes.io/name: meertime-dataportal
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.0.5"
    app.kubernetes.io/managed-by: Helm
spec:
  schedule: "* * * * *"
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 5
  successfulJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      labels:
        name: secrets-integrator-meertime
        cronjob-name: secrets-integrator-meertime
        helm.sh/chart: meertime-dataportal-1.0.45
        app.kubernetes.io/name: meertime-dataportal
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "3.0.5"
        app.kubernetes.io/managed-by: Helm
    spec:
      backoffLimit: 1
      template:
        spec:
          serviceAccountName: meertime
          containers:
            - command:
                - kubectl
                - apply
                - -f
                - /vault/secrets/
              name: meertime-vault-kube-integrator
              image: bitnami/kubectl:1.17.4
              imagePullPolicy: IfNotPresent
              resources: {}
          imagePullSecrets:
            - name: regcred
          restartPolicy: Never
          volumes:
        metadata:
          annotations:
            vault.hashicorp.com/agent-init-first: "true"
            vault.hashicorp.com/agent-inject: "true"
            vault.hashicorp.com/agent-inject-secret-db-config-secret.yaml: kv/meertime/db-config
            vault.hashicorp.com/agent-inject-secret-db-control-secret.yaml: kv/meertime/db-control
            vault.hashicorp.com/agent-inject-secret-db-root-credentials.yaml: kv/meertime/dbroot
            vault.hashicorp.com/agent-inject-secret-django-multi-secret.yaml: kv/meertime/django-multi
            vault.hashicorp.com/agent-inject-secret-regcred.yaml: kv/nexus/docker
            vault.hashicorp.com/agent-inject-template-db-config-secret.yaml: |
              {{- with secret "kv/meertime/db-config" -}}
              apiVersion: v1
              kind: Secret
              type: Opaque
              data:
                {{ range $k, $v := .Data }}
                {{ $k }}: {{ $v }}
                {{ end }}
              metadata:
                name: db-config
              {{- end }}
            vault.hashicorp.com/agent-inject-template-db-control-secret.yaml: |
              {{- with secret "kv/meertime/db-control" -}}
              apiVersion: v1
              kind: Secret
              type: Opaque
              data:
                {{ range $k, $v := .Data }}
                {{ $k }}: {{ $v }}
                {{ end }}
              metadata:
                name: db-control
              {{- end }}
            vault.hashicorp.com/agent-inject-template-db-root-credentials.yaml: |
              {{- with secret "kv/meertime/dbroot" -}}
              apiVersion: v1
              kind: Secret
              type: Opaque
              data:
                password: {{ .Data.password }}
              metadata:
                name: db-root-credentials
              {{- end }}
            vault.hashicorp.com/agent-inject-template-django-multi-secret.yaml: |
              {{- with secret "kv/meertime/django-multi" -}}
              apiVersion: v1
              kind: Secret
              type: Opaque
              data:
                {{ range $k, $v := .Data }}
                {{ $k }}: {{ $v }}
                {{ end }}
              metadata:
                name: django-multi
              {{- end }}
            vault.hashicorp.com/agent-inject-template-regcred.yaml: |
              {{- with secret "kv/nexus/docker" -}}
              apiVersion: v1
              kind: Secret
              data:
                .dockerconfigjson: {{ .Data.auth }}
              metadata:
                name: meertime-regcred
              type: kubernetes.io/dockerconfigjson
              {{- end }}
            vault.hashicorp.com/agent-pre-populate-only: "true"
            vault.hashicorp.com/role: meertime
