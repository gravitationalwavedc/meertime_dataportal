# Default values for meertime-dataportal.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "meertime"

podAnnotations:
  serviceAccountName: meertime
  vault.hashicorp.com/role: "meertime"
  vault.hashicorp.com/agent-inject: "true"
  vault.hashicorp.com/agent-init-first: "true"
  vault.hashicorp.com/agent-pre-populate-only: "true"
  vault.hashicorp.com/agent-inject-secret-retrieve-control.sh: "kv/meertime/nexus/service"
  vault.hashicorp.com/agent-inject-template-retrieve-control.sh: |
    {{- with secret "kv/meertime/nexus/service" -}}
    #!/bin/sh

    set -o nounset
    apt update -y; apt install -y wget;
    wget --no-check-certificate --http-user='{{ .Data.NEXUS_USER }}' --http-password='{{ .Data.NEXUS_PASS }}' https://{{ .Data.NEXUS_URL }}/{{ .Data.NEXUS_CONTROL_DIR }}/$1 -P /tmp
    {{- end }}

podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  port: 80
  type: ClusterIP

services:
  - name: django-service
    portName: django
    port: 8000
    selector: django
    label: django
  - name: nginx-service
    portName: nginx
    port: 80
    selector: nginx
    label: nginx
  - name: react-service
    portName: react
    port: 3000
    selector: react
    label: react
  - name: database-service
    portName: postgres
    port: 5432
    selector: database
    label: database

deployments:
  - name: database
    label: database
    container:
      name: postgres
      image: postgres
      imageTag: 14.9
      envFrom:
        - name: db-config
    port: 5432
    volumeMounts:
      - name: db-storage-data
        mountPath: /var/lib/postgresql/data
    livereadinessProbe:
      initialDelaySeconds: 30
      periodSeconds: 30
      httpGet: false
      exec:
        command:
          - bash
          - "-c"
          - |
            set -ex
            psql -w -U $POSTGRES_USER -d $POSTGRES_DATABASE -c "SELECT 1"
    volumes:
      - name: db-storage-data
        persistentVolumeClaim:
          claimName: db-storage-data

  - name: react
    label: react
    imagePullSecrets: regcred
    serviceAccountName: meertime
    container:
      name: react
      image: nexus.gwdc.org.au/meertime/react
    port: 3000
    livereadinessProbe:
      initialDelaySeconds: 30
      periodSeconds: 30
      httpGet: true

  - name: django
    label: django
    imagePullSecrets: regcred
    serviceAccountName: meertime
    container:
      name: django
      image: nexus.gwdc.org.au/meertime/django
      env:
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: db-configmap
              key: host
      envFrom:
        - name: django-multi
        - name: db-config
      volumeMounts:
        - name: meertime-img-storage
          mountPath: /media
      command:
        ["gunicorn", "--bind=0.0.0.0:8000", "--timeout=120", "--workers=8", "meertime.wsgi:application"]
    port: 8000
    initContainers:
      - name: postgres-ingest-script
        image: postgres
        imageTag: 14.9
        env:
          - name: DB_HOST
            valueFrom:
              configMapKeyRef:
                name: db-configmap
                key: host
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: db-config
                key: POSTGRES_PASSWORD
        envFrom:
          - name: db-control
          - name: db-config
        volumeMounts:
          - name: db-ingest-script
            mountPath: /mnt/db-ingest/
        command: ["/bin/sh", "/mnt/db-ingest/ingest-postgres.sh"]
      - name: migrate
        image: nexus.gwdc.org.au/meertime/django
        env:
          - name: DB_HOST
            valueFrom:
              configMapKeyRef:
                name: db-configmap
                key: host
        envFrom:
          - name: django-multi
          - name: db-config
        command: ["python", "manage.py", "migrate"]
    livereadinessProbe:
      initialDelaySeconds: 30
      periodSeconds: 30
      httpGet: true
    volumeMounts:
      - name: meertime-img-storage
        mountPath: /media
    volumes:
      - name: db-storage-data
        persistentVolumeClaim:
          claimName: db-storage-data
      - name: db-ingest-script
        configMap:
          name: db-ingest-script
      - name: meertime-img-storage
        persistentVolumeClaim:
          claimName: meertime-storage-img

  - name: nginx
    label: nginx
    imagePullSecrets: regcred
    serviceAccountName: meertime
    container:
      name: ng-meertime
      image: nexus.gwdc.org.au/meertime/nginx
      imageTag: 1.5.1
    port: 80
    livereadinessProbe:
      initialDelaySeconds: 30
      periodSeconds: 30
      httpGet: true
    initContainers:
      - name: collectstatic
        image: nexus.gwdc.org.au/meertime/django
        command: ["python", "manage.py", "collectstatic", "--noinput"]
        env:
          - name: DB_HOST
            valueFrom:
              configMapKeyRef:
                name: db-configmap
                key: host
        envFrom:
          - name: django-multi
          - name: db-config
        volumeMounts:
          - name: static-volume-django
            mountPath: /static
    volumeMounts:
      - mountPath: /static
        name: static-volume-django
      - mountPath: /media
        name: meertime-img-storage
    volumes:
      - name: static-volume-django
      - name: meertime-img-storage
        persistentVolumeClaim:
          claimName: meertime-storage-img


cronJobs:
  - name: db-bkp-cronjob
    schedule: "20 1 * * *"
    concurrencyPolicy: Forbid
    failedJobsHistoryLimit: 7
    successfulJobsHistoryLimit: 7
    command: ["/bin/sh", "/scripts/backup.sh"]
    image: postgres:14.9
    containersName: postgres-backup-script
    env:
      - name: DB_HOST
        valueFrom:
          configMapKeyRef:
            name: db-configmap
            key: host
      - name: PGPASSWORD
        valueFrom:
          secretKeyRef:
            name: db-config
            key: POSTGRES_PASSWORD
    envFrom:
      - name: db-control
      - name: db-config
    volumeMounts:
      - mountPath: /backup
        name: backups
      - mountPath: /scripts
        name: db-bkp-script
    imagePullSecrets:
      name: regcred
    volumes:
      - name: backups
        persistentVolumeClaim:
          claimName: db-storage-bkp
      - name: db-bkp-script
        configMap:
          name: db-bkp-script
  - name: secrets-integrator-meertime
    schedule: "* * * * *"
    concurrencyPolicy: Forbid
    failedJobsHistoryLimit: 5
    successfulJobsHistoryLimit: 1
    command: ["kubectl", "apply", "-f", "/vault/secrets/"]
    image: "bitnami/kubectl:1.17.4"
    containersName: meertime-vault-kube-integrator
    serviceAccountName: meertime
    imagePullSecrets:
      name: regcred
    annotations:
        vault.hashicorp.com/agent-init-first: "true"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-pre-populate-only : "true"
        vault.hashicorp.com/agent-inject-secret-db-config-secret.yaml: kv/meertime/db-config
        vault.hashicorp.com/agent-inject-secret-db-control-secret.yaml: kv/meertime/db-control
        vault.hashicorp.com/agent-inject-secret-db-root-credentials.yaml: kv/meertime/dbroot
        vault.hashicorp.com/agent-inject-secret-django-multi-secret.yaml: kv/meertime/django-multi
        vault.hashicorp.com/agent-inject-secret-regcred.yaml: kv/nexus/docker
        vault.hashicorp.com/agent-inject-template-db-config-secret.yaml: |
          {{- with secret "kv/meertime/db-config" -}}
          apiVersion: v1
          kind: Secret
          type: Opaque
          data:
            {{ range $k, $v := .Data }}
            {{ $k }}: {{ $v }}
            {{ end }}
          metadata:
            name: db-config
          {{- end }}
        vault.hashicorp.com/agent-inject-template-db-control-secret.yaml: |
          {{- with secret "kv/meertime/db-control" -}}
          apiVersion: v1
          kind: Secret
          type: Opaque
          data:
            {{ range $k, $v := .Data }}
            {{ $k }}: {{ $v }}
            {{ end }}
          metadata:
            name: db-control
          {{- end }}
        vault.hashicorp.com/agent-inject-template-db-root-credentials.yaml:
          |
          {{- with secret "kv/meertime/dbroot" -}}
          apiVersion: v1
          kind: Secret
          type: Opaque
          data:
            password: {{ .Data.password }}
          metadata:
            name: db-root-credentials
          {{- end }}
        vault.hashicorp.com/agent-inject-template-django-multi-secret.yaml:
          |
          {{- with secret "kv/meertime/django-multi" -}}
          apiVersion: v1
          kind: Secret
          type: Opaque
          data:
            {{ range $k, $v := .Data }}
            {{ $k }}: {{ $v }}
            {{ end }}
          metadata:
            name: django-multi
          {{- end }}
        vault.hashicorp.com/agent-inject-template-regcred.yaml: |
          {{- with secret "kv/nexus/docker" -}}
          apiVersion: v1
          kind: Secret
          data:
            .dockerconfigjson: {{ .Data.auth }}
          metadata:
            name: meertime-regcred
          type: kubernetes.io/dockerconfigjson
          {{- end }}
        vault.hashicorp.com/role: meertime

configMapScripts:
  - name: db-ingest-script
    label: db-ingest
    scriptName: ingest-postgres.sh
    script: |
      #!/bin/sh

      apt update -y
      apt install -y curl wget

      CONTROL_DIR=/tmp
      STATE_FILE=${CONTROL_DIR}/mysql-state.cfg
      DESIRED_STATE=meertime_staging_db_init_2023-12-22.sql.gz
      DESIRED_STATE_UNPACKED=$(echo $DESIRED_STATE | sed 's/.gz//g')
      CHECKSUM=de53b851f9e07f48887f88094b8e83a4

      trap "rm -f ${CONTROL_DIR}/${DESIRED_STATE} ${CONTROL_DIR}/${DESIRED_STATE_UNPACKED}" EXIT

      # Check if the database is empty
      is_empty=$(psql -h $DB_HOST -U $POSTGRES_USER -d $POSTGRES_DATABASE -wtAc "SELECT COUNT(*) FROM pg_tables WHERE schemaname != 'pg_catalog' AND schemaname != 'information_schema';")

      if [ "$is_empty" -eq "0" ]; then
        echo "Database is empty. Restoring from backup..."
        /bin/sh /vault/secrets/retrieve-control.sh ${DESIRED_STATE}

        echo "Listing download"
        ls -l ${CONTROL_DIR}/${DESIRED_STATE}
        md5sum_check=$(md5sum ${CONTROL_DIR}/${DESIRED_STATE} | awk '{print $1}')
        if [ "${md5sum_check}" = "${CHECKSUM}" ]; then
          echo "Checksum matches, proceeding"
          # Run pg_restore
          gunzip  < ${CONTROL_DIR}/${DESIRED_STATE} | pg_restore -d $POSTGRES_DATABASE -U $POSTGRES_USER -w -h $DB_HOST
          echo ${DESIRED_STATE} > ${STATE_FILE}
        else
          echo "Checksum of desired state file does not match expectation, aborting"
          echo "Expected ${CHECKSUM} got ${md5sum_check}"
          ls ${CONTROL_DIR}/${DESIRED_STATE}
          exit 1
        fi
      else
        echo "Database is not empty. No restore needed."
      fi

      exit 0
  - name: db-bkp-script
    label: db-bkp-script
    scriptName: backup.sh
    script: |
      #!/bin/sh
      #
      # postgres backup script
      #

      apt update -y
      apt install -y curl wget

      BACKUP_DIR="/backup"
      TIMESTAMP="$(date +%Y%m%d%H%M%S)"
      echo "test postgres connection"
      if [ -z "$(psql -w -U $POSTGRES_USER -d $POSTGRES_DATABASE -h $DB_HOST -c 'SELECT 1')" ]; then
        echo "postgres connection failed! exiting..."
        exit 1
      fi
      echo "started" > ${BACKUP_DIR}/${TIMESTAMP}.state


      echo "delete old backups"
      find ${BACKUP_DIR} -maxdepth 2 -mtime +3 -regex "^${BACKUP_DIR}/.*[0-9]*_.*\.sql.tar.gz$" -type f -exec rm {} \;

      echo "Backing up db ${POSTGRES_DATABASE}"

      pg_dump -Fc --file=${TIMESTAMP}_${POSTGRES_DATABASE}.sql -U $POSTGRES_USER -d $POSTGRES_DATABASE -h $DB_HOST -O
      rc=$?

      if [ "$rc" != "0" ]; then
        echo "backup failed"
        exit 1
      fi

      echo "Archiving sqldumps"
      tar -cvf ${BACKUP_DIR}/${TIMESTAMP}.sql.tar.gz ${TIMESTAMP}*

      echo "complete" > ${BACKUP_DIR}/${TIMESTAMP}.state
      echo "Disk usage in ${BACKUP_DIR}"
      du -h -d 2 ${BACKUP_DIR}
      echo "Backup successful! :-)"


ingress: {}

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

nfsStorage: []
