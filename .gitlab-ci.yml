variables:
  POETRY_HOME: "/opt/poetry"
  POSTGRES_ROOT_PASSWORD: "postgresrootpassword"
  POSTGRES_DATABASE: "meertime"
  POSTGRES_USER: "buffy"
  POSTGRES_PASSWORD: "islayvampires"
  DB_HOST: "postgres"
  POSTGRES_PORT: "3306"
  DEBIAN_FRONTEND: "noninteractive"
  DOCKER_REGISTRY: "nexus.gwdc.org.au"

stages:
  - test
  - build
  - package-publish

image:
  name: ubuntu:20.04
  entrypoint: ["/usr/bin/env"]

services:
- postgres:12.2-alpine

before_script:
  - apt -y update
  - apt -y install apt-utils
  - apt -y install net-tools git curl wget python3.9 python3-pip python3.8-venv python3.9-dev postgresql postgresql-client libpq-dev
  - apt -y upgrade
  - curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
  - echo $POETRY_HOME
  - python3 -m venv $POETRY_HOME
  - $POETRY_HOME/bin/pip install poetry
  - $POETRY_HOME/bin/poetry --version
  - $POETRY_HOME/bin/poetry config virtualenvs.in-project true
  - cp backend/.env.template backend/.env
  - export PGPASSWORD=$POSTGRES_PASSWORD


cache:
  - key:
      files:
        - backend/poetry.lock
    paths:
      - backend/.venv/

django-tests:
  stage: test
  script:
    - cd backend/
    - $POETRY_HOME/bin/poetry install
    - $POETRY_HOME/bin/poetry run pytest --junit-xml=reports/junit.xml

  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage.xml
      junit: backend/reports/junit.xml


react-test:
  stage: test
  image: cypress/browsers:node-18.16.0-chrome-113.0.5672.92-1-ff-113.0-edge-113.0.1774.35-1

  variables:
    CYPRESS_RECORD_KEY: $CYPRESS_RECORD_KEY
    VITE_GRAPHQL_API: "http://localhost:8000/graphql/"

  before_script:
    - corepack enable
    - corepack prepare pnpm@latest-8 --activate
    - pnpm config set store-dir .pnpm-store

  script:
    - cd frontend
    - pnpm install
    - pnpm run relay
    - pnpm run test --run --coverage --reporter=junit --outputFile=./reports/junit.xml
    - pnpm run build
    - pnpm run preview --port 5173 & npx wait-on http://localhost:5173
    - pnpm run cypress:e2e --browser chrome

  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: frontend/reports/cobertura-coverage.xml
      junit: frontend/reports/junit.xml

code-quality:
  stage: test
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
    SP_VERSION: 0.85.26
  allow_failure: true
  services:
    - docker:stable-dind
  before_script: []
  script:
    - docker run
        --env SOURCE_CODE="$PWD"
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/ci-cd/codequality:$SP_VERSION" /code
  artifacts:
    reports:
      codequality: gl-code-quality-report.json


flake8:
  stage: test
  script:
    - cd backend/
    - pip3 install flake8-gl-codeclimate
    - flake8 --exit-zero --format gl-codeclimate --output-file gl-code-quality-report.json .
  artifacts:
    reports:
      codequality: backend/gl-code-quality-report.json


black:
  stage: test
  script:
    - cd backend/
    - $POETRY_HOME/bin/poetry install
    - $POETRY_HOME/bin/poetry run black .

react-formatting:
  stage: test
  image: node:18

  before_script:
    - corepack enable
    - corepack prepare pnpm@latest-8 --activate
    - pnpm config set store-dir .pnpm-store

  script:
    - cd frontend
    - pnpm install
    - pnpm exec prettier --check .
    - pnpm exec eslint src

docker-build:
  stage: build
  image: docker:20.10.16
  before_script: []
  services:
    - docker:20.10.16-dind
  script:
    - echo $NEXUS_PASSWORD | docker login $DOCKER_REGISTRY -u $NEXUS_USER --password-stdin
    - RELEASE=$(cat .release)
    - TAG="$RELEASE-$CI_COMMIT_SHORT_SHA"
    - docker build . -t $DOCKER_REGISTRY/meertime/react:$TAG -f docker/meertime_react.Dockerfile
    - docker push $DOCKER_REGISTRY/meertime/react:$TAG
    - docker build . -t $DOCKER_REGISTRY/meertime/django:$TAG -f docker/meertime_django.Dockerfile
    - docker push $DOCKER_REGISTRY/meertime/django:$TAG

helm-package:
  stage: test
  image:
    name: alpine/helm:3.5.3
    entrypoint: [""]
  variables:
    CHART: kubernetes/meertime-dataportal
    GITLAB_PRIVATE_TOKEN: $CI_GIT_TOKEN
    CHART_PATH: kubernetes/meertime-dataportal
    REMOTE_REPO: nexus
    CHART_NAME: meertime-dataportal
    NEXUS_HELM_URL: https://nexus.gwdc.org.au/repository/helm
  before_script:
    - apk add git curl
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git remote set-url --push origin "https://GIT_PUSH_TOKEN:${GIT_PUSH_TOKEN}@gitlab.com/CAS-eResearch/GWDC/code/meertime_dataportal.git"
    - helm plugin install --version=v0.9.0 https://github.com/chartmuseum/helm-push.git
    - helm repo add ${REMOTE_REPO} ${NEXUS_HELM_URL}
    - helm repo update
  script:
    - export CHART_VERSION=$(helm show chart ${CHART} | awk '/^version:/ {print $2}')
    - ./scripts/helm-chart-push ${CHART} ${REMOTE_REPO} ${CHART_NAME} $CHART_VERSION $NEXUS_USER:$NEXUS_PASSWORD $NEXUS_HELM_URL    
  only:
    refs:
      - main
      - staging
