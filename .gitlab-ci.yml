services:
  - mysql:8.0

variables:
  POETRY_HOME: "/opt/poetry"
  MYSQL_ROOT_PASSWORD: "mysqlrootpassword"
  MYSQL_DATABASE: "meertime"
  MYSQL_USER: "buffy"
  MYSQL_PASSWORD: "islayvampires"
  DB_HOST: "mysql"
  MYSQL_PORT: "3306"

default:
  image:
    name: ubuntu:20.04
    entrypoint: ["/usr/bin/env"]

  before_script:
    - apt -y update
    - apt -y install apt-utils
    - apt -y install net-tools python3.8 python3-pip git curl wget python3.8-venv mysql-client libmysqlclient-dev
    - apt -y upgrade
    - curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
    - echo $POETRY_HOME
    - python3 -m venv $POETRY_HOME
    - $POETRY_HOME/bin/pip install poetry
    - $POETRY_HOME/bin/poetry --version
    - $POETRY_HOME/bin/poetry config virtualenvs.in-project true
    - cp backend/.env.template backend/.env
    - echo "GRANT ALL PRIVILEGES ON *.* TO '${MYSQL_USER}'@'%' WITH GRANT OPTION;FLUSH PRIVILEGES;" | mysql --user=root --password="$MYSQL_ROOT_PASSWORD" --host=mysql

cache:
  - key:
      files:
        - backend/poetry.lock
    paths:
      - backend/.venv/

django-tests:
  stage: test
  script:
    - cd backend/
    - $POETRY_HOME/bin/poetry install
    - $POETRY_HOME/bin/poetry run pytest --junit-xml=reports/junit.xml

  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage.xml
      junit: backend/reports/junit.xml


react-test:
  stage: test
  image: node:19.1.0

  variables:
    CYPRESS_RECORD_KEY: $CYPRESS_RECORD_KEY

  before_script:
    - corepack enable
    - corepack prepare pnpm@latest-8 --activate
    - pnpm config set store-dir .pnpm-store

  script:
    - cd frontend
    - pnpm install
    - pnpm run relay
    - pnpm run test --coverage --reporter=junit --outputFile=./reports/junit.xml
    - pnpm run dev --port 3000 & npx wait-on 'http://localhost:3000'
    - pnpm run cypress --record

  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: frontend/reports/cobertura-coverage.xml
      junit: frontend/reports/junit.xml

  cache:
    key:
      files:
       - pnpm-lock.yaml
    paths:
       - .pnpm-store

code-quality:
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
    SP_VERSION: 0.85.26
  allow_failure: true
  services:
    - docker:stable-dind
  before_script: []
  script:
    - docker run
        --env SOURCE_CODE="$PWD"
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/ci-cd/codequality:$SP_VERSION" /code
  artifacts:
    reports:
      codequality: gl-code-quality-report.json


flake8:
  script:
    - cd backend/
    - pip3 install flake8-gl-codeclimate
    - flake8 --exit-zero --format gl-codeclimate --output-file gl-code-quality-report.json .
  artifacts:
    reports:
      codequality: backend/gl-code-quality-report.json
