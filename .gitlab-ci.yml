variables:
  POETRY_HOME: "/opt/poetry"
  DEVELOPMENT_MODE: "True"
  DJANGO_SECRET_KEY: "averysecretkey"
  SECRET_CAPTCHA_KEY: "captcha-fake-key"
  EMAIL_HOST: "mail.host.yes"
  EMAIL_PORT: 587
  DEFAULT_FROM_EMAIL: "noreply@adacs.org"
  POSTGRES_ROOT_PASSWORD: "postgresrootpassword"
  POSTGRES_DATABASE: "meertime"
  POSTGRES_USER: "buffy"
  POSTGRES_PASSWORD: "islayvampires"
  DB_HOST: "postgres"
  POSTGRES_PORT: "5432"
  DEBIAN_FRONTEND: "noninteractive"

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Code-Quality.gitlab-ci.yml

stages:
  - test

django-tests:
  stage: test
  image:
    name: ubuntu:20.04
    entrypoint: ["/usr/bin/env"]

  services:
    - postgres:12.2-alpine

  cache:
    - key:
        files:
          - backend/poetry.lock
      paths:
        - backend/.venv/

  before_script:
    - apt -y update
    - apt -y install apt-utils
    - apt -y install net-tools git curl wget python3.9 python3-pip python3.8-venv python3.9-dev postgresql postgresql-client libpq-dev
    - apt -y upgrade
    - curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
    - echo $POETRY_HOME
    - python3 -m venv $POETRY_HOME
    - $POETRY_HOME/bin/pip install poetry
    - $POETRY_HOME/bin/poetry --version
    - $POETRY_HOME/bin/poetry config virtualenvs.in-project true
    - export PGPASSWORD=$POSTGRES_PASSWORD

  script:
    - cd backend/
    - $POETRY_HOME/bin/poetry install
    - export PATH=$PATH:$POETRY_HOME/bin
    - ./run_coverage.sh

  coverage: '/TOTAL.*\s+(\d.+%)$/'

  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage.xml
      junit: backend/junit-reports/*.xml

flake8:
  stage: test
  image: registry.gitlab.com/pipeline-components/flake8:latest
  script:
    - flake8 --verbose --exit-zero gl-codeclimate --output-file gl-code-quality-report.json backend
  artifacts:
    reports:
      codequality: gl-code-quality-report.json

black:
  stage: test
  image: pyfound/black:24.8.0
  script:
    - cd backend/
    - black --version
    - black . --check --verbose --config pyproject.toml

react-test:
  stage: test
  image: cypress/browsers:node-18.16.0-chrome-113.0.5672.92-1-ff-113.0-edge-113.0.1774.35-1

  variables:
    CYPRESS_RECORD_KEY: $CYPRESS_RECORD_KEY
    VITE_GRAPHQL_API: "http://localhost:5173/api/graphql/"

  before_script:
    - corepack enable
    - corepack prepare pnpm@latest-8 --activate
    - pnpm config set store-dir .pnpm-store

  script:
    - cd frontend
    - pnpm install
    - pnpm run relay
    - pnpm run test --run --coverage --reporter=junit --outputFile=./reports/junit.xml
    - pnpm run build
    - pnpm run preview --port 5173 & npx wait-on http://localhost:5173
    - pnpm run cypress:e2e --browser chrome

  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: frontend/reports/cobertura-coverage.xml
      junit: frontend/reports/junit.xml

react-formatting:
  stage: test
  image: node:18

  before_script:
    - corepack enable
    - corepack prepare pnpm@latest-8 --activate
    - pnpm config set store-dir .pnpm-store

  script:
    - cd frontend
    - pnpm install
    - pnpm exec prettier --check src
    - pnpm exec eslint src
