schema {
  query: Query
  mutation: Mutation
}

type AccountActivation {
  ok: Boolean
  provisionalUser: ProvisionalUserType
  errors: [String]
}

type ActivateUser {
  ok: Boolean
  errors: [String]
}

enum CalibrationCalibrationType {
  PRE
  POST
  NONE
}

type CalibrationConnection {
  pageInfo: PageInfo!
  edges: [CalibrationEdge]!
}

type CalibrationEdge {
  node: CalibrationNode
  cursor: String!
}

input CalibrationInput {
  scheduleBlockId: String
  calibrationType: String!
  location: String
}

type CalibrationNode implements Node {
  id: ID!
  scheduleBlockId: String
  calibrationType: CalibrationCalibrationType!
  location: String
  start: DateTime
  end: DateTime
  allProjects: String
  nObservations: Int
  nAntMin: Int
  nAntMax: Int
  totalIntegrationTimeSeconds: Float
  observations(offset: Int, before: String, after: String, first: Int, last: Int, utcStart: DateTime, utcStart_Isnull: Boolean, utcStart_Lt: DateTime, utcStart_Lte: DateTime, utcStart_Gt: DateTime, utcStart_Gte: DateTime, utcStart_Month: DateTime, utcStart_Year: DateTime, utcStart_Date: DateTime, duration: Float, duration_Lt: Float, duration_Lte: Float, duration_Gt: Float, duration_Gte: Float, telescope_Id: ID, telescope_Name: String, pulsar_Id: ID, pulsar_Name: String, project_Id: ID, project_Short: String): ObservationNodeConnection!
  observationSummaries(offset: Int, before: String, after: String, first: Int, last: Int, pulsar: ID, mainProject: ID, project: ID, calibration: ID, obsType: ObservationSummaryObsType, band: ObservationSummaryBand, observations: Int, pulsars: Int, projects: Int, estimatedDiskSpaceGb: Float, observationHours: Int, timespanDays: Int, minDuration: Float, maxDuration: Float): ObservationSummaryNodeConnection!
  idInt: Int
}

type CreateCalibration {
  calibration: CalibrationNode
}

type CreateEphemeris {
  ephemeris: EphemerisNode
}

type CreateMainProject {
  mainproject: MainProjectNode
}

type CreateObservation {
  observation: ObservationNode
}

type CreatePasswordResetRequest {
  ok: Boolean
  passwordResetRequest: PasswordResetRequestType
  errors: [String]
}

type CreatePipelineRun {
  pipelineRun: PipelineRunNode
}

type CreateProject {
  project: ProjectNode
}

type CreateProvisionalUser {
  ok: Boolean
  emailSent: Boolean
  errors: [String]
}

type CreatePulsar {
  pulsar: PulsarNode
}

type CreateRegistration {
  ok: Boolean
  registration: RegistrationType
  errors: [String]
}

type CreateResidualOutput {
  residual: [ResidualNode]
}

type CreateTelescope {
  telescope: TelescopeNode
}

type CreateToaOutput {
  toa: [ToaNode]
}

scalar DateTime

type DeactivateUser {
  ok: Boolean
  errors: [String]
}

scalar Decimal

type DeleteCalibration {
  ok: Boolean
}

type DeleteEphemeris {
  ok: Boolean
  ephemeris: EphemerisNode
}

type DeleteMainProject {
  ok: Boolean
  mainproject: MainProjectNode
}

type DeleteObservation {
  ok: Boolean
}

type DeletePipelineRun {
  ok: Boolean
}

type DeleteProject {
  project: ProjectNode
}

type DeletePulsar {
  ok: Boolean
}

type DeleteResidual {
  ok: Boolean
}

type DeleteTelescope {
  ok: Boolean
}

type DeleteTemplate {
  ok: Boolean
  template: TemplateNode
}

type DeleteToa {
  ok: Boolean
}

type DeleteUser {
  ok: Boolean
  errors: [String]
}

type EphemerisConnection {
  pageInfo: PageInfo!
  edges: [EphemerisEdge]!
}

type EphemerisEdge {
  node: EphemerisNode
  cursor: String!
}

input EphemerisInput {
  pulsarName: String!
  ephemerisText: String!
  projectCode: String
  projectShort: String
  comment: String
}

type EphemerisNode implements Node {
  id: ID!
  pulsar: PulsarNode
  project: ProjectNode
  createdAt: DateTime!
  createdBy: UserType
  ephemerisData: JSONString
  ephemerisHash: String
  p0: Float!
  dm: Float!
  validFrom: DateTime!
  validTo: DateTime!
  comment: String
  observationSet(offset: Int, before: String, after: String, first: Int, last: Int, utcStart: DateTime, utcStart_Isnull: Boolean, utcStart_Lt: DateTime, utcStart_Lte: DateTime, utcStart_Gt: DateTime, utcStart_Gte: DateTime, utcStart_Month: DateTime, utcStart_Year: DateTime, utcStart_Date: DateTime, duration: Float, duration_Lt: Float, duration_Lte: Float, duration_Gt: Float, duration_Gte: Float, telescope_Id: ID, telescope_Name: String, pulsar_Id: ID, pulsar_Name: String, project_Id: ID, project_Short: String): ObservationNodeConnection!
  pipelinerunSet(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, observation_Id: ID, ephemeris_Id: ID, template_Id: ID, pipelineName: String, pipelineDescription: String, pipelineVersion: String, createdAt: DateTime, createdAt_Isnull: Boolean, createdAt_Lt: DateTime, createdAt_Lte: DateTime, createdAt_Gt: DateTime, createdAt_Gte: DateTime, createdAt_Month: DateTime, createdAt_Year: DateTime, createdAt_Date: DateTime, jobState: PipelineRunJobState, location: String, dm: Float, dm_Lt: Float, dm_Lte: Float, dm_Gt: Float, dm_Gte: Float, dmErr: Float, dmErr_Lt: Float, dmErr_Lte: Float, dmErr_Gt: Float, dmErr_Gte: Float, dmEpoch: Float, dmEpoch_Lt: Float, dmEpoch_Lte: Float, dmEpoch_Gt: Float, dmEpoch_Gte: Float, dmChi2r: Float, dmChi2r_Lt: Float, dmChi2r_Lte: Float, dmChi2r_Gt: Float, dmChi2r_Gte: Float, dmTres: Float, dmTres_Lt: Float, dmTres_Lte: Float, dmTres_Gt: Float, dmTres_Gte: Float, sn: Float, sn_Lt: Float, sn_Lte: Float, sn_Gt: Float, sn_Gte: Float, flux: Float, flux_Lt: Float, flux_Lte: Float, flux_Gt: Float, flux_Gte: Float, rm: Float, rm_Lt: Float, rm_Lte: Float, rm_Gt: Float, rm_Gte: Float, percentRfiZapped: Float, percentRfiZapped_Lt: Float, percentRfiZapped_Lte: Float, percentRfiZapped_Gt: Float, percentRfiZapped_Gte: Float): PipelineRunNodeConnection!
  toaSet(offset: Int, before: String, after: String, first: Int, last: Int, pipelineRun: ID, observation: ID, project: ID, ephemeris: ID, template: ID, residual: ID, archive: String, freqMhz: Float, mjd: Decimal, mjdErr: Float, telescope: String, fe: String, be: String, f: String, bw: Int, tobs: Int, tmplt: String, gof: Float, nbin: Int, nch: Int, chan: Int, rcvr: String, snr: Float, length: Int, subint: Int, dmCorrected: Boolean, minimumNsubs: Boolean, maximumNsubs: Boolean, obsNchan: Int, obsNpol: Int): ToaNodeConnection!
  idInt: Int
}

type EphemerisNodeConnection {
  pageInfo: PageInfo!
  edges: [EphemerisNodeEdge]!
}

type EphemerisNodeEdge {
  node: EphemerisNode
  cursor: String!
}

type FileConnection {
  pageInfo: PageInfo!
  edges: [FileEdge]!
}

input FileDownloadTokenMutationInput {
  path: String!
  clientMutationId: String
}

type FileDownloadTokenMutationPayload {
  downloadToken: String
  clientMutationId: String
}

type FileEdge {
  node: JobControllerFile
  cursor: String!
}

scalar GenericScalar

scalar JSONString

type JobControllerFile implements Node {
  id: ID!
  fileSize: Int
  isDir: Boolean
  path: String
}

type MainProjectConnection {
  pageInfo: PageInfo!
  edges: [MainProjectEdge]!
}

type MainProjectEdge {
  node: MainProjectNode
  cursor: String!
}

input MainProjectInput {
  telescopeName: String!
  name: String!
}

type MainProjectNode implements Node {
  id: ID!
  telescope: TelescopeNode
  name: String!
  projectSet(offset: Int, before: String, after: String, first: Int, last: Int, mainProject: ID, code: String, short: String, embargoPeriod: Float, description: String): ProjectNodeConnection!
  observationsummarySet(offset: Int, before: String, after: String, first: Int, last: Int, pulsar: ID, mainProject: ID, project: ID, calibration: ID, obsType: ObservationSummaryObsType, band: ObservationSummaryBand, observations: Int, pulsars: Int, projects: Int, estimatedDiskSpaceGb: Float, observationHours: Int, timespanDays: Int, minDuration: Float, maxDuration: Float): ObservationSummaryNodeConnection!
  pulsarfoldsummarySet(offset: Int, before: String, after: String, first: Int, last: Int, pulsar: ID, mainProject: ID, firstObservation: DateTime, latestObservation: DateTime, latestObservationBeam: Int, timespan: Int, numberOfObservations: Int, totalIntegrationHours: Float, lastIntegrationMinutes: Float, allBands: String, lastSn: Float, highestSn: Float, lowestSn: Float, avgSnPipe: Float, maxSnPipe: Float, mostCommonProject: String, allProjects: String): PulsarFoldSummaryNodeConnection!
  pulsarsearchsummarySet(offset: Int, before: String, after: String, first: Int, last: Int, pulsar: ID, mainProject: ID, firstObservation: DateTime, latestObservation: DateTime, timespan: Int, numberOfObservations: Int, totalIntegrationHours: Float, lastIntegrationMinutes: Float, allBands: String, mostCommonProject: String, allProjects: String): PulsarSearchSummaryNodeConnection!
}

type MainProjectNodeConnection {
  pageInfo: PageInfo!
  edges: [MainProjectNodeEdge]!
}

type MainProjectNodeEdge {
  node: MainProjectNode
  cursor: String!
}

type Mutation {
  getFileDownloadToken(input: FileDownloadTokenMutationInput!): FileDownloadTokenMutationPayload
  createProvisionalUser(email: String!, role: String!): CreateProvisionalUser
  deleteUser(username: String): DeleteUser
  activateUser(username: String): ActivateUser
  deactivateUser(username: String): DeactivateUser
  updateRole(role: String, username: String): UpdateRole
  createRegistration(input: RegistrationInput!): CreateRegistration
  verifyRegistration(verificationCode: String!): VerifyRegistration
  createPasswordResetRequest(email: String!): CreatePasswordResetRequest
  passwordReset(password: String!, verificationCode: String!): PasswordReset
  passwordChange(oldPassword: String!, password: String!, username: String!): PasswordChange
  accountActivation(activationCode: String!, userInput: RegistrationInput!): AccountActivation
  createResidual(input: ResidualInput!): CreateResidualOutput
  updateResidual(id: Int!, input: ResidualInput!): UpdateResidual
  deleteResidual(id: Int!): DeleteResidual
  createToa(input: ToaInput!): CreateToaOutput
  updateToa(id: Int!, input: ToaInput!): UpdateToa
  deleteToa(id: Int!): DeleteToa
  createPipelineRun(input: PipelineRunInput): CreatePipelineRun
  updatePipelineRun(id: Int!, input: PipelineRunInput!): UpdatePipelineRun
  deletePipelineRun(id: Int!): DeletePipelineRun
  deleteTemplate(id: Int!): DeleteTemplate
  createProject(input: ProjectInput!): CreateProject
  updateProject(id: Int!, input: ProjectInput!): UpdateProject
  deleteProject(id: Int!): DeleteProject
  createMainProject(input: MainProjectInput!): CreateMainProject
  updateMainProject(id: Int!, input: MainProjectInput!): UpdateMainProject
  deleteMainProject(id: Int!): DeleteMainProject
  createTelescope(input: TelescopeInput!): CreateTelescope
  updateTelescope(id: Int!, input: TelescopeInput!): UpdateTelescope
  deleteTelescope(id: Int!): DeleteTelescope
  createEphemeris(input: EphemerisInput): CreateEphemeris
  updateEphemeris(id: Int!, input: EphemerisInput!): UpdateEphemeris
  deleteEphemeris(id: Int!): DeleteEphemeris
  createCalibration(input: CalibrationInput): CreateCalibration
  updateCalibration(id: Int!, input: CalibrationInput!): UpdateCalibration
  deleteCalibration(id: Int!): DeleteCalibration
  createObservation(input: ObservationInput): CreateObservation
  updateObservation(id: Int!, input: ObservationInput!): UpdateObservation
  deleteObservation(id: Int!): DeleteObservation
  createPulsar(input: PulsarsInput): CreatePulsar
  updatePulsar(id: Int!, input: PulsarsInput!): UpdatePulsar
  deletePulsar(id: Int!): DeletePulsar
  tokenAuth(input: ObtainJSONWebTokenInput!): ObtainJSONWebTokenPayload
  verifyToken(input: VerifyInput!): VerifyPayload
  refreshToken(input: RefreshInput!): RefreshPayload
}

interface Node {
  id: ID!
}

enum ObservationBand {
  UHF
  LBAND
  SBAND_0
  SBAND_1
  SBAND_2
  SBAND_3
  SBAND_4
  OTHER
}

type ObservationConnection {
  pageInfo: PageInfo!
  edges: [ObservationEdge]!
  pulsar_Name: [String]
  telescope_Name: String
  project_Id: Int
  project_Short: String
  utcStartGte: DateTime
  utcStartLte: DateTime
  totalObservations: Int
  totalObservationHours: Int
  totalPulsars: Int
  totalObservationsTelLt35: Int
}

type ObservationEdge {
  node: ObservationNode
  cursor: String!
}

input ObservationInput {
  pulsarName: String!
  telescopeName: String!
  projectCode: String!
  calibrationId: Int!
  frequency: Float
  bandwidth: Float
  nchan: Int
  beam: Int
  nant: Int
  nantEff: Int
  npol: Int
  obsType: String
  utcStart: DateTime
  raj: String
  decj: String
  duration: Float
  nbit: Int
  tsamp: Float
  ephemerisText: String
  foldNbin: Int
  foldNchan: Int
  foldTsubint: Int
  filterbankNbit: Int
  filterbankNpol: Int
  filterbankNchan: Int
  filterbankTsamp: Float
  filterbankDm: Float
}

type ObservationNode implements Node {
  id: ID!
  pulsar: PulsarNode
  telescope: TelescopeNode
  project: ProjectNode
  calibration: CalibrationNode
  embargoEndDate: DateTime
  band: ObservationBand!
  frequency: Float!
  bandwidth: Float!
  nchan: Int!
  beam: Int!
  nant: Int
  nantEff: Int
  npol: Int!
  obsType: ObservationObsType!
  utcStart: DateTime!
  dayOfYear: Float
  binaryOrbitalPhase: Float
  raj: String!
  decj: String!
  duration: Float
  nbit: Int!
  tsamp: Float!
  ephemeris: EphemerisNode
  foldNbin: Int
  foldNchan: Int
  foldTsubint: Int
  filterbankNbit: Int
  filterbankNpol: Int
  filterbankNchan: Int
  filterbankTsamp: Float
  filterbankDm: Float
  pipelineRuns(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, observation_Id: ID, ephemeris_Id: ID, template_Id: ID, pipelineName: String, pipelineDescription: String, pipelineVersion: String, createdAt: DateTime, createdAt_Isnull: Boolean, createdAt_Lt: DateTime, createdAt_Lte: DateTime, createdAt_Gt: DateTime, createdAt_Gte: DateTime, createdAt_Month: DateTime, createdAt_Year: DateTime, createdAt_Date: DateTime, jobState: PipelineRunJobState, location: String, dm: Float, dm_Lt: Float, dm_Lte: Float, dm_Gt: Float, dm_Gte: Float, dmErr: Float, dmErr_Lt: Float, dmErr_Lte: Float, dmErr_Gt: Float, dmErr_Gte: Float, dmEpoch: Float, dmEpoch_Lt: Float, dmEpoch_Lte: Float, dmEpoch_Gt: Float, dmEpoch_Gte: Float, dmChi2r: Float, dmChi2r_Lt: Float, dmChi2r_Lte: Float, dmChi2r_Gt: Float, dmChi2r_Gte: Float, dmTres: Float, dmTres_Lt: Float, dmTres_Lte: Float, dmTres_Gt: Float, dmTres_Gte: Float, sn: Float, sn_Lt: Float, sn_Lte: Float, sn_Gt: Float, sn_Gte: Float, flux: Float, flux_Lt: Float, flux_Lte: Float, flux_Gt: Float, flux_Gte: Float, rm: Float, rm_Lt: Float, rm_Lte: Float, rm_Gt: Float, rm_Gte: Float, percentRfiZapped: Float, percentRfiZapped_Lt: Float, percentRfiZapped_Lte: Float, percentRfiZapped_Gt: Float, percentRfiZapped_Gte: Float): PipelineRunNodeConnection!
  pulsarFoldResults(offset: Int, before: String, after: String, first: Int, last: Int, observation: ID, pipelineRun: ID, pulsar: ID): PulsarFoldResultNodeConnection!
  toas(offset: Int, before: String, after: String, first: Int, last: Int, pipelineRun: ID, observation: ID, project: ID, ephemeris: ID, template: ID, residual: ID, archive: String, freqMhz: Float, mjd: Decimal, mjdErr: Float, telescope: String, fe: String, be: String, f: String, bw: Int, tobs: Int, tmplt: String, gof: Float, nbin: Int, nch: Int, chan: Int, rcvr: String, snr: Float, length: Int, subint: Int, dmCorrected: Boolean, minimumNsubs: Boolean, maximumNsubs: Boolean, obsNchan: Int, obsNpol: Int): ToaNodeConnection!
  restricted: Boolean
}

type ObservationNodeConnection {
  pageInfo: PageInfo!
  edges: [ObservationNodeEdge]!
}

type ObservationNodeEdge {
  node: ObservationNode
  cursor: String!
}

enum ObservationObsType {
  CAL
  FOLD
  SEARCH
}

enum ObservationSummaryBand {
  UHF
  LBAND
  SBAND_0
  SBAND_1
  SBAND_2
  SBAND_3
  SBAND_4
  OTHER
}

type ObservationSummaryConnection {
  pageInfo: PageInfo!
  edges: [ObservationSummaryEdge]!
}

type ObservationSummaryEdge {
  node: ObservationSummaryNode
  cursor: String!
}

type ObservationSummaryNode implements Node {
  id: ID!
  pulsar: PulsarNode
  mainProject: MainProjectNode
  project: ProjectNode
  calibration: CalibrationNode
  obsType: ObservationSummaryObsType
  band: ObservationSummaryBand
  observations: Int
  pulsars: Int
  projects: Int
  estimatedDiskSpaceGb: Float
  observationHours: Int
  timespanDays: Int
  minDuration: Float
  maxDuration: Float
}

type ObservationSummaryNodeConnection {
  pageInfo: PageInfo!
  edges: [ObservationSummaryNodeEdge]!
}

type ObservationSummaryNodeEdge {
  node: ObservationSummaryNode
  cursor: String!
}

enum ObservationSummaryObsType {
  CAL
  FOLD
  SEARCH
}

input ObtainJSONWebTokenInput {
  clientMutationId: String
  username: String!
  password: String!
}

type ObtainJSONWebTokenPayload {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  meerWatchKey: String
  user: UserType
  clientMutationId: String
  token: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PasswordChange {
  ok: Boolean
  user: UserType
  errors: [String]
}

type PasswordReset {
  ok: Boolean
  passwordResetRequest: PasswordResetRequestType
  errors: [String]
}

enum PasswordResetRequestStatus {
  NOT_UPDATED
  UPDATED
}

type PasswordResetRequestType implements Node {
  id: ID!
  email: String!
  status: PasswordResetRequestStatus!
  verificationExpiry: DateTime
  created: DateTime!
  lastUpdated: DateTime!
}

type PipelineFileConnection {
  pageInfo: PageInfo!
  edges: [PipelineFileEdge]!
}

type PipelineFileEdge {
  node: PipelineFileNode
  cursor: String!
}

enum PipelineFileFileType {
  FTS
}

type PipelineFileNode implements Node {
  id: ID!
  pulsarFoldResult: PulsarFoldResultNode
  file: String
  fileType: PipelineFileFileType!
}

type PipelineFileNodeConnection {
  pageInfo: PageInfo!
  edges: [PipelineFileNodeEdge]!
}

type PipelineFileNodeEdge {
  node: PipelineFileNode
  cursor: String!
}

type PipelineImageConnection {
  pageInfo: PageInfo!
  edges: [PipelineImageEdge]!
}

type PipelineImageEdge {
  node: PipelineImageNode
  cursor: String!
}

enum PipelineImageImageType {
  TOA_DM_CORRECTED
  TOA_SINGLE
  PROFILE
  PROFILE_POL
  PHASE_TIME
  PHASE_FREQ
  BANDPASS
  SNR_CUMUL
  SNR_SINGLE
}

type PipelineImageNode implements Node {
  id: ID!
  pulsarFoldResult: PulsarFoldResultNode
  image: String
  url: String
  cleaned: Boolean!
  imageType: PipelineImageImageType!
  resolution: PipelineImageResolution!
}

type PipelineImageNodeConnection {
  pageInfo: PageInfo!
  edges: [PipelineImageNodeEdge]!
}

type PipelineImageNodeEdge {
  node: PipelineImageNode
  cursor: String!
}

enum PipelineImageResolution {
  HIGH
  LOW
}

type PipelineRunConnection {
  pageInfo: PageInfo!
  edges: [PipelineRunEdge]!
}

type PipelineRunEdge {
  node: PipelineRunNode
  cursor: String!
}

input PipelineRunInput {
  observationId: Int
  ephemerisId: Int
  templateId: Int
  pipelineName: String
  pipelineDescription: String
  pipelineVersion: String
  jobState: String
  location: String
  configuration: String
  dm: Float
  dmErr: Float
  dmEpoch: Float
  dmChi2r: Float
  dmTres: Float
  sn: Float
  flux: Float
  rm: Float
  rmErr: Float
  percentRfiZapped: Float
}

enum PipelineRunJobState {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

type PipelineRunNode implements Node {
  id: ID!
  observation: ObservationNode
  ephemeris: EphemerisNode
  template: TemplateNode
  pipelineName: String!
  pipelineDescription: String
  pipelineVersion: String!
  createdAt: DateTime!
  createdBy: String!
  jobState: PipelineRunJobState!
  location: String!
  configuration: JSONString
  toasDownloadLink: String
  dm: Float
  dmErr: Float
  dmEpoch: Float
  dmChi2r: Float
  dmTres: Float
  sn: Float
  flux: Float
  rm: Float
  rmErr: Float
  percentRfiZapped: Float
  pulsarfoldresultSet(offset: Int, before: String, after: String, first: Int, last: Int, observation: ID, pipelineRun: ID, pulsar: ID): PulsarFoldResultNodeConnection!
  toas(offset: Int, before: String, after: String, first: Int, last: Int, pipelineRun: ID, observation: ID, project: ID, ephemeris: ID, template: ID, residual: ID, archive: String, freqMhz: Float, mjd: Decimal, mjdErr: Float, telescope: String, fe: String, be: String, f: String, bw: Int, tobs: Int, tmplt: String, gof: Float, nbin: Int, nch: Int, chan: Int, rcvr: String, snr: Float, length: Int, subint: Int, dmCorrected: Boolean, minimumNsubs: Boolean, maximumNsubs: Boolean, obsNchan: Int, obsNpol: Int): ToaNodeConnection!
  project: ProjectNode
}

type PipelineRunNodeConnection {
  pageInfo: PageInfo!
  edges: [PipelineRunNodeEdge]!
}

type PipelineRunNodeEdge {
  node: PipelineRunNode
  cursor: String!
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
}

type ProjectEdge {
  node: ProjectNode
  cursor: String!
}

input ProjectInput {
  mainProjectName: String!
  code: String
  short: String
  embargoPeriod: Int
  description: String
}

type ProjectNode implements Node {
  id: ID!
  mainProject: MainProjectNode
  code: String!
  short: String!
  embargoPeriod: Int
  description: String
  ephemerisSet(offset: Int, before: String, after: String, first: Int, last: Int, p0: Float, p0_Lt: Float, p0_Lte: Float, p0_Gt: Float, p0_Gte: Float, dm: Float, dm_Lt: Float, dm_Lte: Float, dm_Gt: Float, dm_Gte: Float, ephemerisHash: String): EphemerisNodeConnection!
  templateSet(offset: Int, before: String, after: String, first: Int, last: Int, band: TemplateBand, createdAt: DateTime, createdAt_Isnull: Boolean, createdAt_Lt: DateTime, createdAt_Lte: DateTime, createdAt_Gt: DateTime, createdAt_Gte: DateTime, createdAt_Month: DateTime, createdAt_Year: DateTime, createdAt_Date: DateTime, templateHash: String): TemplateNodeConnection!
  observationSet(offset: Int, before: String, after: String, first: Int, last: Int, utcStart: DateTime, utcStart_Isnull: Boolean, utcStart_Lt: DateTime, utcStart_Lte: DateTime, utcStart_Gt: DateTime, utcStart_Gte: DateTime, utcStart_Month: DateTime, utcStart_Year: DateTime, utcStart_Date: DateTime, duration: Float, duration_Lt: Float, duration_Lte: Float, duration_Gt: Float, duration_Gte: Float, telescope_Id: ID, telescope_Name: String, pulsar_Id: ID, pulsar_Name: String, project_Id: ID, project_Short: String): ObservationNodeConnection!
  observationsummarySet(offset: Int, before: String, after: String, first: Int, last: Int, pulsar: ID, mainProject: ID, project: ID, calibration: ID, obsType: ObservationSummaryObsType, band: ObservationSummaryBand, observations: Int, pulsars: Int, projects: Int, estimatedDiskSpaceGb: Float, observationHours: Int, timespanDays: Int, minDuration: Float, maxDuration: Float): ObservationSummaryNodeConnection!
  toaSet(offset: Int, before: String, after: String, first: Int, last: Int, pipelineRun: ID, observation: ID, project: ID, ephemeris: ID, template: ID, residual: ID, archive: String, freqMhz: Float, mjd: Decimal, mjdErr: Float, telescope: String, fe: String, be: String, f: String, bw: Int, tobs: Int, tmplt: String, gof: Float, nbin: Int, nch: Int, chan: Int, rcvr: String, snr: Float, length: Int, subint: Int, dmCorrected: Boolean, minimumNsubs: Boolean, maximumNsubs: Boolean, obsNchan: Int, obsNpol: Int): ToaNodeConnection!
}

type ProjectNodeConnection {
  pageInfo: PageInfo!
  edges: [ProjectNodeEdge]!
}

type ProjectNodeEdge {
  node: ProjectNode
  cursor: String!
}

enum ProvisionalUserRole {
  RESTRICTED
  UNRESTRICTED
  ADMIN
}

type ProvisionalUserType implements Node {
  id: ID!
  email: String!
  role: ProvisionalUserRole!
  activationExpiry: DateTime
  activated: Boolean!
  activatedOn: DateTime
  created: DateTime!
  emailSent: Boolean!
  emailSentOn: DateTime
}

type ProvisionalUserTypeConnection {
  pageInfo: PageInfo!
  edges: [ProvisionalUserTypeEdge]!
}

type ProvisionalUserTypeEdge {
  node: ProvisionalUserType
  cursor: String!
}

type PulsarConnection {
  pageInfo: PageInfo!
  edges: [PulsarEdge]!
}

type PulsarEdge {
  node: PulsarNode
  cursor: String!
}

type PulsarFoldResultConnection {
  pageInfo: PageInfo!
  edges: [PulsarFoldResultEdge]!
  totalObservations: Int
  totalObservationHours: Int
  totalEstimatedDiskSpace: String
  totalProjects: Int
  totalTimespanDays: Int
  maxPlotLength: Int
  minPlotLength: Int
  description: String
  residualEphemeris: EphemerisNode
  toasLink: String
  allProjects: [String]
  allNchans: [Int]
}

type PulsarFoldResultEdge {
  node: PulsarFoldResultNode
  cursor: String!
}

type PulsarFoldResultNode implements Node {
  id: ID!
  observation: ObservationNode
  pipelineRun: PipelineRunNode
  pulsar: PulsarNode!
  images(offset: Int, before: String, after: String, first: Int, last: Int): PipelineImageNodeConnection!
  files(offset: Int, before: String, after: String, first: Int, last: Int): PipelineFileNodeConnection!
  project: ProjectNode
}

type PulsarFoldResultNodeConnection {
  pageInfo: PageInfo!
  edges: [PulsarFoldResultNodeEdge]!
}

type PulsarFoldResultNodeEdge {
  node: PulsarFoldResultNode
  cursor: String!
}

type PulsarFoldSummaryConnection {
  pageInfo: PageInfo!
  edges: [PulsarFoldSummaryEdge]!
  totalObservations: Int
  totalPulsars: Int
  totalObservationTime: Int
  totalProjectTime: Int
}

type PulsarFoldSummaryEdge {
  node: PulsarFoldSummaryNode
  cursor: String!
}

type PulsarFoldSummaryNode implements Node {
  id: ID!
  pulsar: PulsarNode
  mainProject: MainProjectNode
  firstObservation: DateTime!
  latestObservation: DateTime!
  latestObservationBeam: Int!
  timespan: Int!
  numberOfObservations: Int!
  totalIntegrationHours: Float!
  lastIntegrationMinutes: Float
  allBands: String!
  lastSn: Float!
  highestSn: Float!
  lowestSn: Float!
  avgSnPipe: Float
  maxSnPipe: Float
  mostCommonProject: String!
  allProjects: String!
}

type PulsarFoldSummaryNodeConnection {
  pageInfo: PageInfo!
  edges: [PulsarFoldSummaryNodeEdge]!
}

type PulsarFoldSummaryNodeEdge {
  node: PulsarFoldSummaryNode
  cursor: String!
}

type PulsarNode implements Node {
  id: ID!
  name: String!
  comment: String
  ephemerisSet(offset: Int, before: String, after: String, first: Int, last: Int, p0: Float, p0_Lt: Float, p0_Lte: Float, p0_Gt: Float, p0_Gte: Float, dm: Float, dm_Lt: Float, dm_Lte: Float, dm_Gt: Float, dm_Gte: Float, ephemerisHash: String): EphemerisNodeConnection!
  templateSet(offset: Int, before: String, after: String, first: Int, last: Int, band: TemplateBand, createdAt: DateTime, createdAt_Isnull: Boolean, createdAt_Lt: DateTime, createdAt_Lte: DateTime, createdAt_Gt: DateTime, createdAt_Gte: DateTime, createdAt_Month: DateTime, createdAt_Year: DateTime, createdAt_Date: DateTime, templateHash: String): TemplateNodeConnection!
  observationSet(offset: Int, before: String, after: String, first: Int, last: Int, utcStart: DateTime, utcStart_Isnull: Boolean, utcStart_Lt: DateTime, utcStart_Lte: DateTime, utcStart_Gt: DateTime, utcStart_Gte: DateTime, utcStart_Month: DateTime, utcStart_Year: DateTime, utcStart_Date: DateTime, duration: Float, duration_Lt: Float, duration_Lte: Float, duration_Gt: Float, duration_Gte: Float, telescope_Id: ID, telescope_Name: String, pulsar_Id: ID, pulsar_Name: String, project_Id: ID, project_Short: String): ObservationNodeConnection!
  observationsummarySet(offset: Int, before: String, after: String, first: Int, last: Int, pulsar: ID, mainProject: ID, project: ID, calibration: ID, obsType: ObservationSummaryObsType, band: ObservationSummaryBand, observations: Int, pulsars: Int, projects: Int, estimatedDiskSpaceGb: Float, observationHours: Int, timespanDays: Int, minDuration: Float, maxDuration: Float): ObservationSummaryNodeConnection!
  pulsarfoldresultSet(offset: Int, before: String, after: String, first: Int, last: Int, observation: ID, pipelineRun: ID, pulsar: ID): PulsarFoldResultNodeConnection!
  pulsarfoldsummarySet(offset: Int, before: String, after: String, first: Int, last: Int, pulsar: ID, mainProject: ID, firstObservation: DateTime, latestObservation: DateTime, latestObservationBeam: Int, timespan: Int, numberOfObservations: Int, totalIntegrationHours: Float, lastIntegrationMinutes: Float, allBands: String, lastSn: Float, highestSn: Float, lowestSn: Float, avgSnPipe: Float, maxSnPipe: Float, mostCommonProject: String, allProjects: String): PulsarFoldSummaryNodeConnection!
  pulsarsearchsummarySet(offset: Int, before: String, after: String, first: Int, last: Int, pulsar: ID, mainProject: ID, firstObservation: DateTime, latestObservation: DateTime, timespan: Int, numberOfObservations: Int, totalIntegrationHours: Float, lastIntegrationMinutes: Float, allBands: String, mostCommonProject: String, allProjects: String): PulsarSearchSummaryNodeConnection!
}

type PulsarSearchSummaryConnection {
  pageInfo: PageInfo!
  edges: [PulsarSearchSummaryEdge]!
  totalObservations: Int
  totalPulsars: Int
  totalObservationTime: Int
  totalProjectTime: Int
}

type PulsarSearchSummaryEdge {
  node: PulsarSearchSummaryNode
  cursor: String!
}

type PulsarSearchSummaryNode implements Node {
  id: ID!
  pulsar: PulsarNode
  mainProject: MainProjectNode
  firstObservation: DateTime!
  latestObservation: DateTime!
  timespan: Int!
  numberOfObservations: Int!
  totalIntegrationHours: Float!
  lastIntegrationMinutes: Float
  allBands: String!
  mostCommonProject: String!
  allProjects: String!
}

type PulsarSearchSummaryNodeConnection {
  pageInfo: PageInfo!
  edges: [PulsarSearchSummaryNodeEdge]!
}

type PulsarSearchSummaryNodeEdge {
  node: PulsarSearchSummaryNode
  cursor: String!
}

input PulsarsInput {
  name: String!
  comment: String
}

type Query {
  fileSingleList(jname: String!, utc: String!, beam: Int!, before: String, after: String, first: Int, last: Int): FileConnection
  filePulsarList(jname: String!, before: String, after: String, first: Int, last: Int): FileConnection
  pulsar(name: String, before: String, after: String, first: Int, last: Int): PulsarConnection
  telescope(before: String, after: String, first: Int, last: Int): TelescopeConnection
  mainProject(name: String!, before: String, after: String, first: Int, last: Int): MainProjectConnection
  project(code: String, before: String, after: String, first: Int, last: Int): ProjectConnection
  ephemeris(before: String, after: String, first: Int, last: Int): EphemerisConnection
  template(before: String, after: String, first: Int, last: Int): TemplateConnection
  calibration(id: Int, before: String, after: String, first: Int, last: Int): CalibrationConnection
  observation(pulsar_Name: [String], telescope_Name: String, mainProject: String, project_Id: Int, project_Short: String, utcStartGte: String, utcStartLte: String, obsType: String, unprocessed: Boolean, incomplete: Boolean, before: String, after: String, first: Int, last: Int): ObservationConnection
  observationSummary(pulsar_Name: String, mainProject: String, project_Id: Int, project_Short: String, calibration_Id: String, calibrationInt: Int, obsType: String, band: String, before: String, after: String, first: Int, last: Int): ObservationSummaryConnection
  pipelineRun(id: Int, before: String, after: String, first: Int, last: Int): PipelineRunConnection
  pulsarFoldResult(pulsar: String, mainProject: String, utcStart: String, beam: Int, before: String, after: String, first: Int, last: Int): PulsarFoldResultConnection
  pulsarFoldSummary(mainProject: String, mostCommonProject: String, project: String, band: String, before: String, after: String, first: Int, last: Int): PulsarFoldSummaryConnection
  pulsarSearchSummary(mainProject: String, mostCommonProject: String, project: String, band: String, before: String, after: String, first: Int, last: Int): PulsarSearchSummaryConnection
  pipelineImage(before: String, after: String, first: Int, last: Int): PipelineImageConnection
  pipelineFile(before: String, after: String, first: Int, last: Int): PipelineFileConnection
  toa(pipelineRunId: Int, pulsar: String, mainProject: String, projectShort: String, dmCorrected: Boolean, minimumNsubs: Boolean, maximumNsubs: Boolean, obsNchan: Int, obsNpol: Int, before: String, after: String, first: Int, last: Int): ToaConnection
  residual(pulsar: String, dmCorrected: Boolean, minimumNsubs: Boolean, maximumNsubs: Boolean, obsNchan: Int, obsNpol: Int, before: String, after: String, first: Int, last: Int): ResidualConnection
}

input RefreshInput {
  token: String
  clientMutationId: String
}

type RefreshPayload {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  clientMutationId: String
  token: String!
}

input RegistrationInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  captcha: String!
}

enum RegistrationStatus {
  UNVERIFIED
  VERIFIED
}

type RegistrationType implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  status: RegistrationStatus!
  verificationExpiry: DateTime
  created: DateTime!
  lastUpdated: DateTime!
}

type RegistrationTypeConnection {
  pageInfo: PageInfo!
  edges: [RegistrationTypeEdge]!
}

type RegistrationTypeEdge {
  node: RegistrationType
  cursor: String!
}

type ResidualConnection {
  pageInfo: PageInfo!
  edges: [ResidualEdge]!
}

type ResidualEdge {
  node: ResidualNode
  cursor: String!
}

input ResidualInput {
  residualLines: [String]!
}

type ResidualNode implements Node {
  id: ID!
  mjd: Decimal!
  dayOfYear: Float!
  binaryOrbitalPhase: Float
  residualSec: Float!
  residualSecErr: Float!
  residualPhase: Float!
  residualPhaseErr: Float
  toaSet(offset: Int, before: String, after: String, first: Int, last: Int, pipelineRun: ID, observation: ID, project: ID, ephemeris: ID, template: ID, residual: ID, archive: String, freqMhz: Float, mjd: Decimal, mjdErr: Float, telescope: String, fe: String, be: String, f: String, bw: Int, tobs: Int, tmplt: String, gof: Float, nbin: Int, nch: Int, chan: Int, rcvr: String, snr: Float, length: Int, subint: Int, dmCorrected: Boolean, minimumNsubs: Boolean, maximumNsubs: Boolean, obsNchan: Int, obsNpol: Int): ToaNodeConnection!
  pipelineRun: PipelineRunNode
  ephemeris: EphemerisNode
  template: TemplateNode
}

type TelescopeConnection {
  pageInfo: PageInfo!
  edges: [TelescopeEdge]!
}

type TelescopeEdge {
  node: TelescopeNode
  cursor: String!
}

input TelescopeInput {
  name: String!
}

type TelescopeNode implements Node {
  id: ID!
  name: String!
  mainprojectSet(offset: Int, before: String, after: String, first: Int, last: Int, telescope: ID, name: String): MainProjectNodeConnection!
  observationSet(offset: Int, before: String, after: String, first: Int, last: Int, utcStart: DateTime, utcStart_Isnull: Boolean, utcStart_Lt: DateTime, utcStart_Lte: DateTime, utcStart_Gt: DateTime, utcStart_Gte: DateTime, utcStart_Month: DateTime, utcStart_Year: DateTime, utcStart_Date: DateTime, duration: Float, duration_Lt: Float, duration_Lte: Float, duration_Gt: Float, duration_Gte: Float, telescope_Id: ID, telescope_Name: String, pulsar_Id: ID, pulsar_Name: String, project_Id: ID, project_Short: String): ObservationNodeConnection!
}

enum TemplateBand {
  UHF
  LBAND
  SBAND_0
  SBAND_1
  SBAND_2
  SBAND_3
  SBAND_4
  OTHER
}

type TemplateConnection {
  pageInfo: PageInfo!
  edges: [TemplateEdge]!
}

type TemplateEdge {
  node: TemplateNode
  cursor: String!
}

type TemplateNode implements Node {
  id: ID!
  pulsar: PulsarNode
  project: ProjectNode
  templateFile: String
  templateHash: String
  band: TemplateBand!
  createdAt: DateTime!
  createdBy: UserType
  pipelinerunSet(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, observation_Id: ID, ephemeris_Id: ID, template_Id: ID, pipelineName: String, pipelineDescription: String, pipelineVersion: String, createdAt: DateTime, createdAt_Isnull: Boolean, createdAt_Lt: DateTime, createdAt_Lte: DateTime, createdAt_Gt: DateTime, createdAt_Gte: DateTime, createdAt_Month: DateTime, createdAt_Year: DateTime, createdAt_Date: DateTime, jobState: PipelineRunJobState, location: String, dm: Float, dm_Lt: Float, dm_Lte: Float, dm_Gt: Float, dm_Gte: Float, dmErr: Float, dmErr_Lt: Float, dmErr_Lte: Float, dmErr_Gt: Float, dmErr_Gte: Float, dmEpoch: Float, dmEpoch_Lt: Float, dmEpoch_Lte: Float, dmEpoch_Gt: Float, dmEpoch_Gte: Float, dmChi2r: Float, dmChi2r_Lt: Float, dmChi2r_Lte: Float, dmChi2r_Gt: Float, dmChi2r_Gte: Float, dmTres: Float, dmTres_Lt: Float, dmTres_Lte: Float, dmTres_Gt: Float, dmTres_Gte: Float, sn: Float, sn_Lt: Float, sn_Lte: Float, sn_Gt: Float, sn_Gte: Float, flux: Float, flux_Lt: Float, flux_Lte: Float, flux_Gt: Float, flux_Gte: Float, rm: Float, rm_Lt: Float, rm_Lte: Float, rm_Gt: Float, rm_Gte: Float, percentRfiZapped: Float, percentRfiZapped_Lt: Float, percentRfiZapped_Lte: Float, percentRfiZapped_Gt: Float, percentRfiZapped_Gte: Float): PipelineRunNodeConnection!
  toaSet(offset: Int, before: String, after: String, first: Int, last: Int, pipelineRun: ID, observation: ID, project: ID, ephemeris: ID, template: ID, residual: ID, archive: String, freqMhz: Float, mjd: Decimal, mjdErr: Float, telescope: String, fe: String, be: String, f: String, bw: Int, tobs: Int, tmplt: String, gof: Float, nbin: Int, nch: Int, chan: Int, rcvr: String, snr: Float, length: Int, subint: Int, dmCorrected: Boolean, minimumNsubs: Boolean, maximumNsubs: Boolean, obsNchan: Int, obsNpol: Int): ToaNodeConnection!
}

type TemplateNodeConnection {
  pageInfo: PageInfo!
  edges: [TemplateNodeEdge]!
}

type TemplateNodeEdge {
  node: TemplateNode
  cursor: String!
}

type ToaConnection {
  pageInfo: PageInfo!
  edges: [ToaEdge]!
  allProjects: [String]
  allNchans: [Int]
}

type ToaEdge {
  node: ToaNode
  cursor: String!
}

input ToaInput {
  pipelineRunId: Int!
  projectShort: String!
  ephemerisText: String!
  templateId: Int!
  toaLines: [String]!
  dmCorrected: Boolean!
  minimumNsubs: Boolean!
  maximumNsubs: Boolean!
  obsNpol: Int!
  obsNchan: Int!
}

type ToaNode implements Node {
  id: ID!
  pipelineRun: PipelineRunNode
  observation: ObservationNode!
  project: ProjectNode!
  ephemeris: EphemerisNode
  template: TemplateNode
  residual: ResidualNode
  archive: String!
  freqMhz: Float!
  mjd: Decimal!
  mjdErr: Float!
  telescope: String!
  fe: String
  be: String
  f: String
  bw: Int
  tobs: Int
  tmplt: String
  gof: Float
  nbin: Int
  nch: Int
  chan: Int
  rcvr: String
  snr: Float
  length: Int
  subint: Int
  dmCorrected: Boolean!
  minimumNsubs: Boolean!
  maximumNsubs: Boolean!
  obsNchan: Int
  obsNpol: Int!
}

type ToaNodeConnection {
  pageInfo: PageInfo!
  edges: [ToaNodeEdge]!
}

type ToaNodeEdge {
  node: ToaNode
  cursor: String!
}

type UpdateCalibration {
  calibration: CalibrationNode
}

type UpdateEphemeris {
  ephemeris: EphemerisNode
}

type UpdateMainProject {
  mainproject: MainProjectNode
}

type UpdateObservation {
  observation: ObservationNode
}

type UpdatePipelineRun {
  pipelineRun: PipelineRunNode
}

type UpdateProject {
  project: ProjectNode
}

type UpdatePulsar {
  pulsar: PulsarNode
}

type UpdateResidual {
  residual: ResidualNode
}

type UpdateRole {
  ok: Boolean
  errors: [String]
}

type UpdateTelescope {
  telescope: TelescopeNode
}

type UpdateToa {
  toa: ToaNode
}

enum UserRole {
  RESTRICTED
  UNRESTRICTED
  ADMIN
}

type UserType implements Node {
  id: ID!
  lastLogin: DateTime
  isSuperuser: Boolean!
  username: String!
  firstName: String!
  lastName: String!
  isStaff: Boolean!
  isActive: Boolean!
  dateJoined: DateTime!
  email: String!
  role: UserRole!
  provisionaluserSet(offset: Int, before: String, after: String, first: Int, last: Int): ProvisionalUserTypeConnection!
  registrationSet(offset: Int, before: String, after: String, first: Int, last: Int): RegistrationTypeConnection!
  ephemerisSet(offset: Int, before: String, after: String, first: Int, last: Int, p0: Float, p0_Lt: Float, p0_Lte: Float, p0_Gt: Float, p0_Gte: Float, dm: Float, dm_Lt: Float, dm_Lte: Float, dm_Gt: Float, dm_Gte: Float, ephemerisHash: String): EphemerisNodeConnection!
  templateSet(offset: Int, before: String, after: String, first: Int, last: Int, band: TemplateBand, createdAt: DateTime, createdAt_Isnull: Boolean, createdAt_Lt: DateTime, createdAt_Lte: DateTime, createdAt_Gt: DateTime, createdAt_Gte: DateTime, createdAt_Month: DateTime, createdAt_Year: DateTime, createdAt_Date: DateTime, templateHash: String): TemplateNodeConnection!
}

input VerifyInput {
  token: String
  clientMutationId: String
}

type VerifyPayload {
  payload: GenericScalar!
  clientMutationId: String
}

type VerifyRegistration {
  ok: Boolean
  registration: RegistrationType
  errors: [String]
}
