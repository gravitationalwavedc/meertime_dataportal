schema {
  query: Query
  mutation: Mutation
}

type AccountActivation {
  ok: Boolean
  provisionalUser: ProvisionalUserType
  errors: [String]
}

type ActivateUser {
  ok: Boolean
  errors: [String]
}

enum CalibrationCalibrationType {
  PRE
  POST
  NONE
}

input CalibrationInput {
  delayCalId: String
  phaseUpId: String
  calibrationType: String!
  location: String
}

type CalibrationType {
  id: ID!
  delayCalId: String
  phaseUpId: String
  calibrationType: CalibrationCalibrationType!
  location: String
  observationSet: [ObservationType!]!
}

type CreateCalibration {
  calibration: CalibrationType
}

type CreateEphemeris {
  ephemeris: EphemerisType
}

type CreateMainProject {
  mainproject: MainProjectType
}

type CreateObservation {
  observation: ObservationType
}

type CreatePasswordResetRequest {
  ok: Boolean
  passwordResetRequest: PasswordResetRequestType
  errors: [String]
}

type CreatePipelineRun {
  pipelineRun: PipelineRunType
}

type CreateProject {
  project: ProjectType
}

type CreateProvisionalUser {
  ok: Boolean
  emailSent: Boolean
  errors: [String]
}

type CreatePulsar {
  pulsar: PulsarType
}

type CreateRegistration {
  ok: Boolean
  registration: RegistrationType
  errors: [String]
}

type CreateTelescope {
  telescope: TelescopeType
}

type CreateToa {
  toa: ToaType
}

scalar DateTime

type DeactivateUser {
  ok: Boolean
  errors: [String]
}

scalar Decimal

type DeleteCalibration {
  ok: Boolean
}

type DeleteEphemeris {
  ok: Boolean
  ephemeris: EphemerisType
}

type DeleteMainProject {
  ok: Boolean
  mainproject: MainProjectType
}

type DeleteObservation {
  ok: Boolean
}

type DeletePipelineRun {
  ok: Boolean
}

type DeleteProject {
  ok: Boolean
  project: ProjectType
}

type DeletePulsar {
  ok: Boolean
}

type DeleteTelescope {
  ok: Boolean
}

type DeleteTemplate {
  ok: Boolean
  template: TemplateType
}

type DeleteToa {
  ok: Boolean
}

type DeleteUser {
  ok: Boolean
  errors: [String]
}

input EphemerisInput {
  pulsarName: String!
  projectCode: String!
  ephemerisText: String!
  comment: String
}

type EphemerisNode implements Node {
  id: ID!
  pulsar: PulsarType!
  project: ProjectType!
  createdAt: DateTime!
  createdBy: UserType
  ephemerisData: JSONString
  ephemerisHash: String
  p0: Float!
  dm: Float!
  validFrom: DateTime!
  validTo: DateTime!
  comment: String
  observationSet: [ObservationType!]!
  pipelinerunSet: [PipelineRunType!]!
  toaSet: [ToaType!]!
}

type EphemerisNodeConnection {
  pageInfo: PageInfo!
  edges: [EphemerisNodeEdge]!
}

type EphemerisNodeEdge {
  node: EphemerisNode
  cursor: String!
}

type EphemerisType {
  id: ID!
  pulsar: PulsarType!
  project: ProjectType!
  createdAt: DateTime!
  createdBy: UserType
  ephemerisData: JSONString
  ephemerisHash: String
  p0: Float!
  dm: Float!
  validFrom: DateTime!
  validTo: DateTime!
  comment: String
  observationSet: [ObservationType!]!
  pipelinerunSet: [PipelineRunType!]!
  toaSet: [ToaType!]!
}

type FoldPulsarResultConnection {
  pageInfo: PageInfo!
  edges: [FoldPulsarResultEdge]!
  totalObservations: Int
  totalObservationHours: Int
  totalEstimatedDiskSpace: String
  totalProjects: Int
  totalTimespanDays: Int
  maxPlotLength: Int
  minPlotLength: Int
  description: String
  ephemerisLink: String
  toasLink: String
}

type FoldPulsarResultEdge {
  node: FoldPulsarResultNode
  cursor: String!
}

type FoldPulsarResultNode implements Node {
  id: ID!
  observation: ObservationType!
  pipelineRun: PipelineRunType!
  pulsar: PulsarType!
  embargoEndDate: DateTime
}

type FoldPulsarResultNodeConnection {
  pageInfo: PageInfo!
  edges: [FoldPulsarResultNodeEdge]!
}

type FoldPulsarResultNodeEdge {
  node: FoldPulsarResultNode
  cursor: String!
}

type FoldPulsarSummaryConnection {
  pageInfo: PageInfo!
  edges: [FoldPulsarSummaryEdge]!
  totalObservations: Int
  totalPulsars: Int
  totalObservationTime: Int
  totalProjectTime: Int
}

type FoldPulsarSummaryEdge {
  node: FoldPulsarSummaryNode
  cursor: String!
}

type FoldPulsarSummaryNode implements Node {
  id: ID!
  pulsar: PulsarType!
  mainProject: MainProjectType!
  firstObservation: DateTime!
  latestObservation: DateTime!
  timespan: Int!
  numberOfObservations: Int!
  totalIntegrationHours: Float!
  lastIntegrationMinutes: Float
  allBands: String!
  lastSn: Float!
  highestSn: Float!
  lowestSn: Float!
  avgSnPipe: Float
  maxSnPipe: Float
  mostCommonProject: String!
  allProjects: String!
}

type FoldPulsarSummaryNodeConnection {
  pageInfo: PageInfo!
  edges: [FoldPulsarSummaryNodeEdge]!
}

type FoldPulsarSummaryNodeEdge {
  node: FoldPulsarSummaryNode
  cursor: String!
}

scalar GenericScalar

scalar JSONString

input MainProjectInput {
  telescopeName: String!
  name: String!
}

type MainProjectNode implements Node {
  id: ID!
  telescope: TelescopeType!
  name: String!
  projectSet: [ProjectType!]!
  foldpulsarsummarySet(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, pulsar_Id: ID, mainProject_Id: ID, firstObservation: DateTime, firstObservation_Isnull: Boolean, firstObservation_Lt: DateTime, firstObservation_Lte: DateTime, firstObservation_Gt: DateTime, firstObservation_Gte: DateTime, firstObservation_Month: DateTime, firstObservation_Year: DateTime, firstObservation_Date: DateTime, latestObservation: DateTime, latestObservation_Isnull: Boolean, latestObservation_Lt: DateTime, latestObservation_Lte: DateTime, latestObservation_Gt: DateTime, latestObservation_Gte: DateTime, latestObservation_Month: DateTime, latestObservation_Year: DateTime, latestObservation_Date: DateTime, timespan: Int, timespan_Lt: Int, timespan_Lte: Int, timespan_Gt: Int, timespan_Gte: Int, numberOfObservations: Int, numberOfObservations_Lt: Int, numberOfObservations_Lte: Int, numberOfObservations_Gt: Int, numberOfObservations_Gte: Int, totalIntegrationHours: Float, totalIntegrationHours_Lt: Float, totalIntegrationHours_Lte: Float, totalIntegrationHours_Gt: Float, totalIntegrationHours_Gte: Float, lastIntegrationMinutes: Float, lastIntegrationMinutes_Lt: Float, lastIntegrationMinutes_Lte: Float, lastIntegrationMinutes_Gt: Float, lastIntegrationMinutes_Gte: Float, allBands: String, lastSn: Float, lastSn_Lt: Float, lastSn_Lte: Float, lastSn_Gt: Float, lastSn_Gte: Float, highestSn: Float, highestSn_Lt: Float, highestSn_Lte: Float, highestSn_Gt: Float, highestSn_Gte: Float, lowestSn: Float, lowestSn_Lt: Float, lowestSn_Lte: Float, lowestSn_Gt: Float, lowestSn_Gte: Float, avgSnPipe: Float, avgSnPipe_Lt: Float, avgSnPipe_Lte: Float, avgSnPipe_Gt: Float, avgSnPipe_Gte: Float, maxSnPipe: Float, maxSnPipe_Lt: Float, maxSnPipe_Lte: Float, maxSnPipe_Gt: Float, maxSnPipe_Gte: Float, mostCommonProject: String, allProjects: String): FoldPulsarSummaryNodeConnection!
}

type MainProjectNodeConnection {
  pageInfo: PageInfo!
  edges: [MainProjectNodeEdge]!
}

type MainProjectNodeEdge {
  node: MainProjectNode
  cursor: String!
}

type MainProjectType {
  id: ID!
  telescope: TelescopeType!
  name: String!
  projectSet: [ProjectType!]!
  foldpulsarsummarySet(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, pulsar_Id: ID, mainProject_Id: ID, firstObservation: DateTime, firstObservation_Isnull: Boolean, firstObservation_Lt: DateTime, firstObservation_Lte: DateTime, firstObservation_Gt: DateTime, firstObservation_Gte: DateTime, firstObservation_Month: DateTime, firstObservation_Year: DateTime, firstObservation_Date: DateTime, latestObservation: DateTime, latestObservation_Isnull: Boolean, latestObservation_Lt: DateTime, latestObservation_Lte: DateTime, latestObservation_Gt: DateTime, latestObservation_Gte: DateTime, latestObservation_Month: DateTime, latestObservation_Year: DateTime, latestObservation_Date: DateTime, timespan: Int, timespan_Lt: Int, timespan_Lte: Int, timespan_Gt: Int, timespan_Gte: Int, numberOfObservations: Int, numberOfObservations_Lt: Int, numberOfObservations_Lte: Int, numberOfObservations_Gt: Int, numberOfObservations_Gte: Int, totalIntegrationHours: Float, totalIntegrationHours_Lt: Float, totalIntegrationHours_Lte: Float, totalIntegrationHours_Gt: Float, totalIntegrationHours_Gte: Float, lastIntegrationMinutes: Float, lastIntegrationMinutes_Lt: Float, lastIntegrationMinutes_Lte: Float, lastIntegrationMinutes_Gt: Float, lastIntegrationMinutes_Gte: Float, allBands: String, lastSn: Float, lastSn_Lt: Float, lastSn_Lte: Float, lastSn_Gt: Float, lastSn_Gte: Float, highestSn: Float, highestSn_Lt: Float, highestSn_Lte: Float, highestSn_Gt: Float, highestSn_Gte: Float, lowestSn: Float, lowestSn_Lt: Float, lowestSn_Lte: Float, lowestSn_Gt: Float, lowestSn_Gte: Float, avgSnPipe: Float, avgSnPipe_Lt: Float, avgSnPipe_Lte: Float, avgSnPipe_Gt: Float, avgSnPipe_Gte: Float, maxSnPipe: Float, maxSnPipe_Lt: Float, maxSnPipe_Lte: Float, maxSnPipe_Gt: Float, maxSnPipe_Gte: Float, mostCommonProject: String, allProjects: String): FoldPulsarSummaryNodeConnection!
}

type Mutation {
  getFileDownloadToken(input: FileDownloadTokenMutationInput!): FileDownloadTokenMutationPayload
  createProvisionalUser(email: String!, role: String!): CreateProvisionalUser
  deleteUser(username: String): DeleteUser
  activateUser(username: String): ActivateUser
  deactivateUser(username: String): DeactivateUser
  updateRole(role: String, username: String): UpdateRole
  createRegistration(input: RegistrationInput!): CreateRegistration
  verifyRegistration(verificationCode: String!): VerifyRegistration
  createPasswordResetRequest(email: String!): CreatePasswordResetRequest
  passwordReset(password: String!, verificationCode: String!): PasswordReset
  passwordChange(oldPassword: String!, password: String!, username: String!): PasswordChange
  accountActivation(activationCode: String!, userInput: RegistrationInput!): AccountActivation
  createToa(input: ToaInput!): CreateToa
  updateToa(id: Int!, input: ToaInput!): UpdateToa
  deleteToa(id: Int!): DeleteToa
  createPipelineRun(input: PipelineRunInput): CreatePipelineRun
  updatePipelineRun(id: Int!, input: PipelineRunInput!): UpdatePipelineRun
  deletePipelineRun(id: Int!): DeletePipelineRun
  deleteTemplate(id: Int!): DeleteTemplate
  createProject(input: ProjectInput!): CreateProject
  updateProject(id: Int!, input: ProjectInput!): UpdateProject
  deleteProject(id: Int!): DeleteProject
  createMainProject(input: MainProjectInput!): CreateMainProject
  updateMainProject(id: Int!, input: MainProjectInput!): UpdateMainProject
  deleteMainProject(id: Int!): DeleteMainProject
  createTelescope(input: TelescopeInput!): CreateTelescope
  updateTelescope(id: Int!, input: TelescopeInput!): UpdateTelescope
  deleteTelescope(id: Int!): DeleteTelescope
  createEphemeris(input: EphemerisInput!): CreateEphemeris
  updateEphemeris(id: Int!, input: EphemerisInput!): UpdateEphemeris
  deleteEphemeris(id: Int!): DeleteEphemeris
  createCalibration(input: CalibrationInput): CreateCalibration
  updateCalibration(id: Int!, input: CalibrationInput!): UpdateCalibration
  deleteCalibration(id: Int!): DeleteCalibration
  createObservation(input: ObservationInput): CreateObservation
  updateObservation(id: Int!, input: ObservationInput!): UpdateObservation
  deleteObservation(id: Int!): DeleteObservation
  createPulsar(input: PulsarsInput): CreatePulsar
  updatePulsar(id: Int!, input: PulsarsInput!): UpdatePulsar
  deletePulsar(id: Int!): DeletePulsar
  tokenAuth(input: ObtainJSONWebTokenInput!): ObtainJSONWebTokenPayload
  verifyToken(input: VerifyInput!): VerifyPayload
  refreshToken(input: RefreshInput!): RefreshPayload
}

interface Node {
  id: ID!
}

enum ObservationBand {
  UHF
  LBAND
  SBAND_0
  SBAND_1
  SBAND_2
  SBAND_3
  SBAND_4
}

input ObservationInput {
  pulsarName: String!
  telescopeName: String!
  projectCode: String!
  calibrationId: Int!
  frequency: Float
  bandwidth: Float
  nchan: Int
  beam: Int
  nant: Int
  nantEff: Int
  npol: Int
  obsType: String
  utcStart: DateTime
  raj: String
  decj: String
  duration: Float
  nbit: Int
  tsamp: Float
  ephemerisText: String
  foldNbin: Int
  foldNchan: Int
  foldTsubint: Int
  filterbankNbit: Int
  filterbankNpol: Int
  filterbankNchan: Int
  filterbankTsamp: Float
  filterbankDm: Float
}

type ObservationNode implements Node {
  id: ID!
  pulsar: PulsarType!
  telescope: TelescopeType!
  project: ProjectType!
  calibration: CalibrationType
  band: ObservationBand!
  frequency: Float!
  bandwidth: Float!
  nchan: Int!
  beam: Int!
  nant: Int
  nantEff: Int
  npol: Int!
  obsType: ObservationObsType!
  utcStart: DateTime!
  raj: String!
  decj: String!
  duration: Float
  nbit: Int!
  tsamp: Float!
  ephemeris: EphemerisType
  foldNbin: Int
  foldNchan: Int
  foldTsubint: Int
  filterbankNbit: Int
  filterbankNpol: Int
  filterbankNchan: Int
  filterbankTsamp: Float
  filterbankDm: Float
  pipelinerunSet: [PipelineRunType!]!
  foldpulsarresultSet(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, observation_Id: ID, pipelineRun_Id: ID, pulsar_Id: ID, embargoEndDate: DateTime, embargoEndDate_Isnull: Boolean, embargoEndDate_Lt: DateTime, embargoEndDate_Lte: DateTime, embargoEndDate_Gt: DateTime, embargoEndDate_Gte: DateTime, embargoEndDate_Month: DateTime, embargoEndDate_Year: DateTime, embargoEndDate_Date: DateTime): FoldPulsarResultNodeConnection!
}

type ObservationNodeConnection {
  pageInfo: PageInfo!
  edges: [ObservationNodeEdge]!
}

type ObservationNodeEdge {
  node: ObservationNode
  cursor: String!
}

enum ObservationObsType {
  CAL
  FOLD
  SEARCH
}

type ObservationType {
  id: ID!
  pulsar: PulsarType!
  telescope: TelescopeType!
  project: ProjectType!
  calibration: CalibrationType
  band: ObservationBand!
  frequency: Float!
  bandwidth: Float!
  nchan: Int!
  beam: Int!
  nant: Int
  nantEff: Int
  npol: Int!
  obsType: ObservationObsType!
  utcStart: DateTime!
  raj: String!
  decj: String!
  duration: Float
  nbit: Int!
  tsamp: Float!
  ephemeris: EphemerisType
  foldNbin: Int
  foldNchan: Int
  foldTsubint: Int
  filterbankNbit: Int
  filterbankNpol: Int
  filterbankNchan: Int
  filterbankTsamp: Float
  filterbankDm: Float
  pipelinerunSet: [PipelineRunType!]!
  foldpulsarresultSet(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, observation_Id: ID, pipelineRun_Id: ID, pulsar_Id: ID, embargoEndDate: DateTime, embargoEndDate_Isnull: Boolean, embargoEndDate_Lt: DateTime, embargoEndDate_Lte: DateTime, embargoEndDate_Gt: DateTime, embargoEndDate_Gte: DateTime, embargoEndDate_Month: DateTime, embargoEndDate_Year: DateTime, embargoEndDate_Date: DateTime): FoldPulsarResultNodeConnection!
}

input ObtainJSONWebTokenInput {
  clientMutationId: String
  username: String!
  password: String!
}

type ObtainJSONWebTokenPayload {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  meerWatchKey: String
  user: UserType
  clientMutationId: String
  token: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PasswordChange {
  ok: Boolean
  user: UserType
  errors: [String]
}

type PasswordReset {
  ok: Boolean
  passwordResetRequest: PasswordResetRequestType
  errors: [String]
}

enum PasswordResetRequestStatus {
  NOT_UPDATED
  UPDATED
}

type PasswordResetRequestType implements Node {
  id: ID!
  email: String!
  status: PasswordResetRequestStatus!
  verificationExpiry: DateTime
  created: DateTime!
  lastUpdated: DateTime!
}

input PipelineRunInput {
  observationId: Int
  ephemerisId: Int
  templateId: Int
  pipelineName: String
  pipelineDescription: String
  pipelineVersion: String
  jobState: String
  location: String
  configuration: String
  dm: Float
  dmErr: Float
  dmEpoch: Float
  dmChi2r: Float
  dmTres: Float
  sn: Float
  flux: Float
  rm: Float
  percentRfiZapped: Float
}

type PipelineRunNode implements Node {
  id: ID!
  observation: ObservationType!
  ephemeris: EphemerisType
  template: TemplateType!
  pipelineName: String!
  pipelineDescription: String
  pipelineVersion: String!
  createdAt: DateTime!
  createdBy: String!
  jobState: String
  location: String!
  configuration: JSONString
  ephemerisDownloadLink: String
  toasDownloadLink: String
  dm: Float
  dmErr: Float
  dmEpoch: Float
  dmChi2r: Float
  dmTres: Float
  sn: Float
  flux: Float
  rm: Float
  percentRfiZapped: Float
  foldpulsarresultSet(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, observation_Id: ID, pipelineRun_Id: ID, pulsar_Id: ID, embargoEndDate: DateTime, embargoEndDate_Isnull: Boolean, embargoEndDate_Lt: DateTime, embargoEndDate_Lte: DateTime, embargoEndDate_Gt: DateTime, embargoEndDate_Gte: DateTime, embargoEndDate_Month: DateTime, embargoEndDate_Year: DateTime, embargoEndDate_Date: DateTime): FoldPulsarResultNodeConnection!
  toaSet: [ToaType!]!
}

type PipelineRunNodeConnection {
  pageInfo: PageInfo!
  edges: [PipelineRunNodeEdge]!
}

type PipelineRunNodeEdge {
  node: PipelineRunNode
  cursor: String!
}

type PipelineRunType {
  id: ID!
  observation: ObservationType!
  ephemeris: EphemerisType
  template: TemplateType!
  pipelineName: String!
  pipelineDescription: String
  pipelineVersion: String!
  createdAt: DateTime!
  createdBy: String!
  jobState: String
  location: String!
  configuration: JSONString
  ephemerisDownloadLink: String
  toasDownloadLink: String
  dm: Float
  dmErr: Float
  dmEpoch: Float
  dmChi2r: Float
  dmTres: Float
  sn: Float
  flux: Float
  rm: Float
  percentRfiZapped: Float
  foldpulsarresultSet(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, observation_Id: ID, pipelineRun_Id: ID, pulsar_Id: ID, embargoEndDate: DateTime, embargoEndDate_Isnull: Boolean, embargoEndDate_Lt: DateTime, embargoEndDate_Lte: DateTime, embargoEndDate_Gt: DateTime, embargoEndDate_Gte: DateTime, embargoEndDate_Month: DateTime, embargoEndDate_Year: DateTime, embargoEndDate_Date: DateTime): FoldPulsarResultNodeConnection!
  toaSet: [ToaType!]!
}

input ProjectInput {
  mainProjectName: String!
  code: String
  short: String
  embargoPeriod: Int
  description: String
}

type ProjectNode implements Node {
  id: ID!
  mainProject: MainProjectType
  code: String!
  short: String!
  embargoPeriod: Int
  description: String
  ephemerisSet: [EphemerisType!]!
  templateSet: [TemplateType!]!
  observationSet: [ObservationType!]!
}

type ProjectNodeConnection {
  pageInfo: PageInfo!
  edges: [ProjectNodeEdge]!
}

type ProjectNodeEdge {
  node: ProjectNode
  cursor: String!
}

type ProjectType {
  id: ID!
  mainProject: MainProjectType
  code: String!
  short: String!
  embargoPeriod: Float!
  description: String
  ephemerisSet: [EphemerisType!]!
  templateSet: [TemplateType!]!
  observationSet: [ObservationType!]!
}

enum ProvisionalUserRole {
  RESTRICTED
  UNRESTRICTED
  ADMIN
}

type ProvisionalUserType implements Node {
  id: ID!
  email: String!
  role: ProvisionalUserRole!
  activationExpiry: DateTime
  activated: Boolean!
  activatedOn: DateTime
  created: DateTime!
  emailSent: Boolean!
  emailSentOn: DateTime
}

type ProvisionalUserTypeConnection {
  pageInfo: PageInfo!
  edges: [ProvisionalUserTypeEdge]!
}

type ProvisionalUserTypeEdge {
  node: ProvisionalUserType
  cursor: String!
}

type PulsarNode implements Node {
  id: ID!
  name: String!
  comment: String
  ephemerisSet: [EphemerisType!]!
  templateSet: [TemplateType!]!
  observationSet: [ObservationType!]!
  foldpulsarresultSet(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, observation_Id: ID, pipelineRun_Id: ID, pulsar_Id: ID, embargoEndDate: DateTime, embargoEndDate_Isnull: Boolean, embargoEndDate_Lt: DateTime, embargoEndDate_Lte: DateTime, embargoEndDate_Gt: DateTime, embargoEndDate_Gte: DateTime, embargoEndDate_Month: DateTime, embargoEndDate_Year: DateTime, embargoEndDate_Date: DateTime): FoldPulsarResultNodeConnection!
  foldpulsarsummarySet(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, pulsar_Id: ID, mainProject_Id: ID, firstObservation: DateTime, firstObservation_Isnull: Boolean, firstObservation_Lt: DateTime, firstObservation_Lte: DateTime, firstObservation_Gt: DateTime, firstObservation_Gte: DateTime, firstObservation_Month: DateTime, firstObservation_Year: DateTime, firstObservation_Date: DateTime, latestObservation: DateTime, latestObservation_Isnull: Boolean, latestObservation_Lt: DateTime, latestObservation_Lte: DateTime, latestObservation_Gt: DateTime, latestObservation_Gte: DateTime, latestObservation_Month: DateTime, latestObservation_Year: DateTime, latestObservation_Date: DateTime, timespan: Int, timespan_Lt: Int, timespan_Lte: Int, timespan_Gt: Int, timespan_Gte: Int, numberOfObservations: Int, numberOfObservations_Lt: Int, numberOfObservations_Lte: Int, numberOfObservations_Gt: Int, numberOfObservations_Gte: Int, totalIntegrationHours: Float, totalIntegrationHours_Lt: Float, totalIntegrationHours_Lte: Float, totalIntegrationHours_Gt: Float, totalIntegrationHours_Gte: Float, lastIntegrationMinutes: Float, lastIntegrationMinutes_Lt: Float, lastIntegrationMinutes_Lte: Float, lastIntegrationMinutes_Gt: Float, lastIntegrationMinutes_Gte: Float, allBands: String, lastSn: Float, lastSn_Lt: Float, lastSn_Lte: Float, lastSn_Gt: Float, lastSn_Gte: Float, highestSn: Float, highestSn_Lt: Float, highestSn_Lte: Float, highestSn_Gt: Float, highestSn_Gte: Float, lowestSn: Float, lowestSn_Lt: Float, lowestSn_Lte: Float, lowestSn_Gt: Float, lowestSn_Gte: Float, avgSnPipe: Float, avgSnPipe_Lt: Float, avgSnPipe_Lte: Float, avgSnPipe_Gt: Float, avgSnPipe_Gte: Float, maxSnPipe: Float, maxSnPipe_Lt: Float, maxSnPipe_Lte: Float, maxSnPipe_Gt: Float, maxSnPipe_Gte: Float, mostCommonProject: String, allProjects: String): FoldPulsarSummaryNodeConnection!
}

type PulsarNodeConnection {
  pageInfo: PageInfo!
  edges: [PulsarNodeEdge]!
}

type PulsarNodeEdge {
  node: PulsarNode
  cursor: String!
}

type PulsarType {
  id: ID!
  name: String!
  comment: String
  ephemerisSet: [EphemerisType!]!
  templateSet: [TemplateType!]!
  observationSet: [ObservationType!]!
  foldpulsarresultSet(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, observation_Id: ID, pipelineRun_Id: ID, pulsar_Id: ID, embargoEndDate: DateTime, embargoEndDate_Isnull: Boolean, embargoEndDate_Lt: DateTime, embargoEndDate_Lte: DateTime, embargoEndDate_Gt: DateTime, embargoEndDate_Gte: DateTime, embargoEndDate_Month: DateTime, embargoEndDate_Year: DateTime, embargoEndDate_Date: DateTime): FoldPulsarResultNodeConnection!
  foldpulsarsummarySet(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, pulsar_Id: ID, mainProject_Id: ID, firstObservation: DateTime, firstObservation_Isnull: Boolean, firstObservation_Lt: DateTime, firstObservation_Lte: DateTime, firstObservation_Gt: DateTime, firstObservation_Gte: DateTime, firstObservation_Month: DateTime, firstObservation_Year: DateTime, firstObservation_Date: DateTime, latestObservation: DateTime, latestObservation_Isnull: Boolean, latestObservation_Lt: DateTime, latestObservation_Lte: DateTime, latestObservation_Gt: DateTime, latestObservation_Gte: DateTime, latestObservation_Month: DateTime, latestObservation_Year: DateTime, latestObservation_Date: DateTime, timespan: Int, timespan_Lt: Int, timespan_Lte: Int, timespan_Gt: Int, timespan_Gte: Int, numberOfObservations: Int, numberOfObservations_Lt: Int, numberOfObservations_Lte: Int, numberOfObservations_Gt: Int, numberOfObservations_Gte: Int, totalIntegrationHours: Float, totalIntegrationHours_Lt: Float, totalIntegrationHours_Lte: Float, totalIntegrationHours_Gt: Float, totalIntegrationHours_Gte: Float, lastIntegrationMinutes: Float, lastIntegrationMinutes_Lt: Float, lastIntegrationMinutes_Lte: Float, lastIntegrationMinutes_Gt: Float, lastIntegrationMinutes_Gte: Float, allBands: String, lastSn: Float, lastSn_Lt: Float, lastSn_Lte: Float, lastSn_Gt: Float, lastSn_Gte: Float, highestSn: Float, highestSn_Lt: Float, highestSn_Lte: Float, highestSn_Gt: Float, highestSn_Gte: Float, lowestSn: Float, lowestSn_Lt: Float, lowestSn_Lte: Float, lowestSn_Gt: Float, lowestSn_Gte: Float, avgSnPipe: Float, avgSnPipe_Lt: Float, avgSnPipe_Lte: Float, avgSnPipe_Gt: Float, avgSnPipe_Gte: Float, maxSnPipe: Float, maxSnPipe_Lt: Float, maxSnPipe_Lte: Float, maxSnPipe_Gt: Float, maxSnPipe_Gte: Float, mostCommonProject: String, allProjects: String): FoldPulsarSummaryNodeConnection!
}

input PulsarsInput {
  name: String!
  comment: String
}

type Query {
  pulsar(name: String!): PulsarNode
  allPulsars(offset: Int, before: String, after: String, first: Int, last: Int, name: String, comment: String): PulsarNodeConnection
  observation(id: ID!): ObservationNode
  allObservations(offset: Int, before: String, after: String, first: Int, last: Int, utcStart: DateTime, utcStart_Isnull: Boolean, utcStart_Lt: DateTime, utcStart_Lte: DateTime, utcStart_Gt: DateTime, utcStart_Gte: DateTime, utcStart_Month: DateTime, utcStart_Year: DateTime, utcStart_Date: DateTime, duration: Float, duration_Lt: Float, duration_Lte: Float, duration_Gt: Float, duration_Gte: Float, telescope_Name: String, pulsar_Name: String, project_Id: ID, project_Short: String): ObservationNodeConnection
  mainproject(name: String!): MainProjectNode
  allMainprojects(offset: Int, before: String, after: String, first: Int, last: Int, telescope: ID, name: String): MainProjectNodeConnection
  project(code: String!): ProjectNode
  allProjects(offset: Int, before: String, after: String, first: Int, last: Int, mainProject: ID, code: String, short: String, embargoPeriod: String, description: String): ProjectNodeConnection
  ephemeris(id: ID!): EphemerisNode
  allEphemeriss(offset: Int, before: String, after: String, first: Int, last: Int, pulsar_Id: ID, p0: Float, p0_Lt: Float, p0_Lte: Float, p0_Gt: Float, p0_Gte: Float, dm: Float, dm_Lt: Float, dm_Lte: Float, dm_Gt: Float, dm_Gte: Float, ephemerisHash: String): EphemerisNodeConnection
  pipelinerun(id: Int!): PipelineRunNode
  allPipelineruns(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, observation_Id: ID, ephemeris_Id: ID, template_Id: ID, pipelineName: String, pipelineDescription: String, pipelineVersion: String, createdAt: DateTime, createdAt_Isnull: Boolean, createdAt_Lt: DateTime, createdAt_Lte: DateTime, createdAt_Gt: DateTime, createdAt_Gte: DateTime, createdAt_Month: DateTime, createdAt_Year: DateTime, createdAt_Date: DateTime, jobState: String, location: String, dm: Float, dm_Lt: Float, dm_Lte: Float, dm_Gt: Float, dm_Gte: Float, dmErr: Float, dmErr_Lt: Float, dmErr_Lte: Float, dmErr_Gt: Float, dmErr_Gte: Float, dmEpoch: Float, dmEpoch_Lt: Float, dmEpoch_Lte: Float, dmEpoch_Gt: Float, dmEpoch_Gte: Float, dmChi2r: Float, dmChi2r_Lt: Float, dmChi2r_Lte: Float, dmChi2r_Gt: Float, dmChi2r_Gte: Float, dmTres: Float, dmTres_Lt: Float, dmTres_Lte: Float, dmTres_Gt: Float, dmTres_Gte: Float, sn: Float, sn_Lt: Float, sn_Lte: Float, sn_Gt: Float, sn_Gte: Float, flux: Float, flux_Lt: Float, flux_Lte: Float, flux_Gt: Float, flux_Gte: Float, rm: Float, rm_Lt: Float, rm_Lte: Float, rm_Gt: Float, rm_Gte: Float, percentRfiZapped: Float, percentRfiZapped_Lt: Float, percentRfiZapped_Lte: Float, percentRfiZapped_Gt: Float, percentRfiZapped_Gte: Float): PipelineRunNodeConnection
  foldPulsarSummary(mainProject: String, mostCommonProject: String, band: String, before: String, after: String, first: Int, last: Int): FoldPulsarSummaryConnection
  foldPulsarResult(pulsar: String!, before: String, after: String, first: Int, last: Int): FoldPulsarResultConnection
}

input RefreshInput {
  token: String
  clientMutationId: String
}

type RefreshPayload {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  clientMutationId: String
  token: String!
}

input RegistrationInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  captcha: String!
}

enum RegistrationStatus {
  UNVERIFIED
  VERIFIED
}

type RegistrationType implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  status: RegistrationStatus!
  verificationExpiry: DateTime
  created: DateTime!
  lastUpdated: DateTime!
}

type RegistrationTypeConnection {
  pageInfo: PageInfo!
  edges: [RegistrationTypeEdge]!
}

type RegistrationTypeEdge {
  node: RegistrationType
  cursor: String!
}

input TelescopeInput {
  name: String!
}

type TelescopeType {
  id: ID!
  name: String!
  mainprojectSet: [MainProjectType!]!
  observationSet: [ObservationType!]!
}

enum TemplateBand {
  UHF
  LBAND
  SBAND_0
  SBAND_1
  SBAND_2
  SBAND_3
  SBAND_4
}

type TemplateType {
  id: ID!
  pulsar: PulsarType!
  project: ProjectType!
  templateFile: String
  templateHash: String
  band: TemplateBand!
  createdAt: DateTime!
  createdBy: UserType
  pipelinerunSet: [PipelineRunType!]!
  toaSet: [ToaType!]!
}

input ToaInput {
  pipelineRunId: Int!
  ephemerisId: Int!
  templateId: Int!
  archive: String!
  freqMHz: Float!
  mjd: Decimal!
  mjdErr: Float!
  telescope: String!
  fe: String
  be: String
  f: String
  bw: Int
  tobs: Int
  tmplt: String
  gof: Float
  nbin: Int
  nch: Int
  chan: Int
  rcvr: String
  snr: Float
  length: Int
  subint: Int
}

type ToaType {
  id: ID!
  pipelineRun: PipelineRunType!
  ephemeris: EphemerisType!
  template: TemplateType!
  archive: String!
  freqMhz: Float!
  mjd: Decimal!
  mjdErr: Float!
  telescope: String!
  fe: String
  be: String
  f: String
  bw: Int
  tobs: Int
  tmplt: String
  gof: Float
  nbin: Int
  nch: Int
  chan: Int
  rcvr: String
  snr: Float
  length: Int
  subint: Int
}

type UpdateCalibration {
  calibration: CalibrationType
}

type UpdateEphemeris {
  ephemeris: EphemerisType
}

type UpdateMainProject {
  mainproject: MainProjectType
}

type UpdateObservation {
  observation: ObservationType
}

type UpdatePipelineRun {
  pipelineRun: PipelineRunType
}

type UpdateProject {
  project: ProjectType
}

type UpdatePulsar {
  pulsar: PulsarType
}

type UpdateRole {
  ok: Boolean
  errors: [String]
}

type UpdateTelescope {
  telescope: TelescopeType
}

type UpdateToa {
  toa: ToaType
}

enum UserRole {
  RESTRICTED
  UNRESTRICTED
  ADMIN
}

type UserType implements Node {
  id: ID!
  lastLogin: DateTime
  isSuperuser: Boolean!
  username: String!
  firstName: String!
  lastName: String!
  isStaff: Boolean!
  isActive: Boolean!
  dateJoined: DateTime!
  email: String!
  role: UserRole!
  provisionaluserSet(offset: Int, before: String, after: String, first: Int, last: Int): ProvisionalUserTypeConnection!
  registrationSet(offset: Int, before: String, after: String, first: Int, last: Int): RegistrationTypeConnection!
  ephemerisSet: [EphemerisType!]!
  templateSet: [TemplateType!]!
}

input VerifyInput {
  token: String
  clientMutationId: String
}

type VerifyPayload {
  payload: GenericScalar!
  clientMutationId: String
}

type VerifyRegistration {
  ok: Boolean
  registration: RegistrationType
  errors: [String]
}
